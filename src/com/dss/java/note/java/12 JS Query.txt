/**
* JS Query
* 学习时间 : 2018/11/29
* 视频时间 : 2013/7/4
* 库 : jquery.js
*/
0 Demo
    <script type="text/javascript" src="jquery.js"></script> // 导入库 库放在同级目录下，放在lib目录下，访问不到
    <script type="text/javascript">
        // 全选/全不选
        // $(function(){})  相当于 window.onload 代码写在{}里
        $(function(){
            $(#"checkedAll_2").click(function(){
                var isCheck = this.checked;
                $(":checkbox[name='items']").attr("checked", isCheck);
            });
            $(":checkbox[name='items']").click(function(){
                $("#checkedAll_2").attr("checked", 
                    $(":checkbox[name='items']").length == $(":checkbox[name='items']:checked").length);
            });
        })
    </script>
1 JQuery 和 DOM
    JQuery
        是通过 $() 包装DOM对象后产生的对象
        在变量前加上$    var $variable = JQuery对象     var variable = DOM对象
        JQuery对象是JQuery独有的。 JQuery对象无法使用DOM对象的任何方法，DOM对象也不能使用JQuery里的任何方法。
        JQuery对象是一个数组对象。
    获得一个JQuery对象
        var $btn = $("button");     // 这种方式是得到当前页面所有的 button
    JQuery对象转为DOM对象
        a. 通过 [index] 的方式
            var btn = $btn[0];      // 这样就转为DOM对象了
        b. get(index)
            var btn  $btn.get(0);   // JQuery对象转为DOM对象 
    DOM对象转为JQuery对象
        $()
            var $btn = $(btn);      // 将DOM对象转为JQuery对象
            $btn.text();            // 获取Button按钮的文本值
2 选择器
    简介
        $("#id")      ==        document.getElementById("id");        
        $("tag")      ==        document.getElementsByTagName("tag");
    基本选择器
        选择器             描述/功能                   返回值
        #id         根据给定的ID匹配一个元素       单个元素组成的集合
        .class      根据给定的类名称匹配元素        集合元素
        element     根据给定的元素名匹配元素        集合元素
        *           匹配所有元素                    集合元素
        seletor1, seletor2,...      将每一个选择器匹配到的元素合并后一起返回        集合元素
      练习
        $("#one").css("background", "#ff0000");         // 修改id为one的 background 属性
        $(".mini").css("background-color", "#ff0000");  // 修改类名为mini的 background-color 属性
        $("div").css("background", "#00ff00");          // 修改所有的div元素的 background 属性
        $("*").css("background", "#eeeeee");            // 修改所有元素的 background 属性
        $("span, #two").css("background", "#ee44ff");   // 修改所有的span元素和id为two的元素的 background 属性
    层次选择器
        通过DOM元素之间的层次关系来获取特定元素，例如后代元素，子元素，相邻元素，兄弟元素
        $("ancestor descendant")    所有的后代元素    集合元素
        $("parent > child")         所有的子元素      集合元素
        $("prev + next")            下一个元素        集合元素
        $("prev ~ siblings")        prev后的所有兄弟元素    集合元素
        后代元素 与 子元素 的区别
            后代元素包括所有的，包括子元素的子元素
            子元素只有其子
        ~ siblings 与 siblings() 的区别
            ~ siblings : 代表该节点之后的所有兄弟元素
            siblings() : 代表该节点的所有兄弟元素，包括之前的，但不包括其本身
      练习
        $("body div").css("background", "#ff0000");     // 修改body内所有的div元素的 background 属性
        $("body > div").css("background-color", "#0000ff");     // 修改body内子元素是div的 background 属性
        $("#one + div").css("background", "#00ff00");   // 修改id为one的下一个div的 background 属性
            // 如果 div 和 id为one 的不相邻，则选择器无效
        $("#two ~ div").css("background", "#eeeeee");   // 修改id为two的后边所有div的 background 属性
        $("#two").siblings("div").css("background", "#ee44ff");         // 修改id为two的所有兄弟元素的 background 属性 不包括自己
        $("#one").nextAll("span:first").css("background", "#44eeff");   // 修改id为one的下一个span的 background 属性
        $("#two").prevAll("div").css("background", "#ffee44");          // 修改id为two的前边所有的div的 background 属性
    过滤选择器
        通过特定的过滤规则来筛选出所需的DOM元素(以 : 开头)
        基本过滤
            :first      选取第一个元素                         单个元素组成的集合
            :last       选取最后一个元素                       集合元素
            :not(seletor)   去除所有与给定选择器匹配的元素     集合元素
            :even       选取索引是偶数的所有元素，索引从0开始  集合元素
            :odd        选取索引是奇数的所有元素，索引从0开始  集合元素
            :eq(index)  选取索引等于index的元素，索引从0开始   集合元素
            :gt(index)  选取索引大于index的元素，索引从0开始   集合元素
            :lt(index)  选取索引小于index的元素，索引从0开始   集合元素
            :header     选取所有的标题元素，h1, h2 等          集合元素
            :animated   选取当前正在执行动画的所有元素         集合元素
          练习
            $("div:first").css("background", "#ff0000");        // 修改第一个div的 background 属性
            $("div:last").css("background-color", "#0000ff");   // 修改最后一个div的 background 属性
            $("div:not(.one)").css("background", "#00ff00");    // 修改类不是one的所有div的 background 属性
            $("div:even").css("background", "#eeeeee");         // 修改索引是偶数的div的 background 属性; odd 用法相同
            $("div:gt(3)").css("background", "#44eeff");        // 修改索引大于3的div的 background 属性; lt,eq 用法相同
            $(":header").css("background", "#66aa66")           // 修改所有标题的 background 属性
            $("div:animated").css("background", "#aa6666")      // 修改当前正在执行动画的div的 background 属性
        内容过滤
            过滤规则主要体现在所包含的子元素和文本内容上
            :contains(text)     选取含有文本内容为text的元素        集合元素
            :empty              选取不包含元素或文本的空元素        集合元素
            :has(seletor)       选取含有选择器所匹配的元素的元素    集合元素
            :parent             选取含有子元素或者文本的元素        集合元素
          练习
            $("div:contains('di')").css("background", "#ff0000");   // 修改含有文本'di'的div的 background 属性
            $("div:empty").css("background-color", "#0000ff");      // 修改不包含子元素(或文本)的div的 background 属性
            $("div:has(.mini)").css("background", "#00ff00");       // 修改含有类为mini的div的 background 属性; 修改的是div,而不是mini
            $("div:parent").css("background", "#eeeeee");           // 修改含有子元素(或文本)的所有div的 background 属性
        可见性过滤
        属性过滤
        子元素过滤
        表单对象属性过滤












格式
<style type="text/css">
    /* 定义格式 */  /* 一定要注意在sytle里的注释是使用 /* */ */
    div, span, p {
        width: 140px;
        height: 140px;
        margin: 5px;
        background: #CCCCFF;
        border: #000000 1px solid;
        float: left;
        font-size: 17px;
        font-family: Verdana;
    }
    div.mini {
        width: 55px;
        height: 55px;
        background-color: #CCCCFF;
        font-size: 12px;
    }
    div.hide{
        display: none;
    }
</style>
<script type="text/javascript">
    function anmateIt() {
        $("#mover").slideToggle("slow", anmateIt);
    }

    anmateIt();
</script>
<body>
<div class="one" id="one">
    id为one, class为one的div
    <div class="mini">class为mini</div>
</div>
<div class="one" id="two" title="test">
    id为two, class为one, title为test的div
    <div class="mini" title="other">class为mini,title为other</div>
    <div class="mini" title="test">class为mini,title为test</div>
</div>
<div class="one" id="three">
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini"></div>
</div>
<div class="one">
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini" title="test">class为mini,title为test</div>
</div>
<div style="display: none" class="none">style的display为'none'的div</div>
<div>包含input的type为'hidden'的div<input type="hidden" size="8"/></div>
<span id="span">^^span元素^^</span>
</body>