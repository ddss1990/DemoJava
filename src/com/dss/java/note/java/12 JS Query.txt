/**
* JS Query
* 学习时间 : 2018/11/29
* 视频时间 : 2013/7/4
* 库 : jquery.js
*/
0 Demo
    <script type="text/javascript" src="jquery.js"></script> // 导入库 库放在同级目录下，放在lib目录下，访问不到
    <script type="text/javascript">
        // 全选/全不选
        // $(function(){})  相当于 window.onload 代码写在{}里
        // $(document).read(function () { 的简写是 $(function)() {
        $(function(){
            $(#"checkedAll_2").click(function(){
                var isCheck = this.checked;
                $(":checkbox[name='items']").attr("checked", isCheck);
            });
            $(":checkbox[name='items']").click(function(){
                $("#checkedAll_2").attr("checked", 
                    $(":checkbox[name='items']").length == $(":checkbox[name='items']:checked").length);
            });
        })
    </script>
1 JQuery 和 DOM
    JQuery
        是JS的一个函数库，使用起来非常方便。
        是通过 $() 包装DOM对象后产生的对象
        在变量前加上$    var $variable = JQuery对象     var variable = DOM对象
        JQuery对象是JQuery独有的。 JQuery对象无法使用DOM对象的任何方法，DOM对象也不能使用JQuery里的任何方法。
        JQuery对象是一个数组对象。
    获得一个JQuery对象
        var $btn = $("button");     // 这种方式是得到当前页面所有的 button
    JQuery对象转为DOM对象
        a. 通过 [index] 的方式
            var btn = $btn[0];      // 这样就转为DOM对象了
        b. get(index)
            var btn  $btn.get(0);   // JQuery对象转为DOM对象 
    DOM对象转为JQuery对象
        $()
            var $btn = $(btn);      // 将DOM对象转为JQuery对象
            $btn.text();            // 获取Button按钮的文本值
2 选择器
    简介
        $("#id")      ==        document.getElementById("id");        
        $("tag")      ==        document.getElementsByTagName("tag");
    基本选择器
        选择器             描述/功能                   返回值
        #id         根据给定的ID匹配一个元素       单个元素组成的集合
        .class      根据给定的类名称匹配元素        集合元素
        element     根据给定的元素名匹配元素        集合元素
        *           匹配所有元素                    集合元素
        seletor1, seletor2,...      将每一个选择器匹配到的元素合并后一起返回        集合元素
      练习
        $("#one").css("background", "#ff0000");         // 修改id为one的 background 属性
        $(".mini").css("background-color", "#ff0000");  // 修改类名为mini的 background-color 属性
        $("div").css("background", "#00ff00");          // 修改所有的div元素的 background 属性
        $("*").css("background", "#eeeeee");            // 修改所有元素的 background 属性
        $("span, #two").css("background", "#ee44ff");   // 修改所有的span元素和id为two的元素的 background 属性
    层次选择器
        通过DOM元素之间的层次关系来获取特定元素，例如后代元素，子元素，相邻元素，兄弟元素
        $("ancestor descendant")    所有的后代元素    集合元素
        $("parent > child")         所有的子元素      集合元素
        $("prev + next")            下一个元素        集合元素
        $("prev ~ siblings")        prev后的所有兄弟元素    集合元素
        后代元素 与 子元素 的区别
            后代元素包括所有的，包括子元素的子元素
            子元素只有其子
        ~ siblings 与 siblings() 的区别
            ~ siblings : 代表该节点之后的所有兄弟元素
            siblings() : 代表该节点的所有兄弟元素，包括之前的，但不包括其本身
      练习
        $("body div").css("background", "#ff0000");     // 修改body内所有的div元素的 background 属性
        $("body > div").css("background-color", "#0000ff");     // 修改body内子元素是div的 background 属性
        $("#one + div").css("background", "#00ff00");   // 修改id为one的下一个div的 background 属性
            // 如果 div 和 id为one 的不相邻，则选择器无效
        $("#two ~ div").css("background", "#eeeeee");   // 修改id为two的后边所有div的 background 属性
        $("#two").siblings("div").css("background", "#ee44ff");         // 修改id为two的所有兄弟元素的 background 属性 不包括自己
        $("#one").nextAll("span:first").css("background", "#44eeff");   // 修改id为one的下一个span的 background 属性
        $("#two").prevAll("div").css("background", "#ffee44");          // 修改id为two的前边所有的div的 background 属性
    过滤选择器
        通过特定的过滤规则来筛选出所需的DOM元素(以 : 开头)
        基本过滤
            :first      选取第一个元素                         单个元素组成的集合
            :last       选取最后一个元素                       集合元素
            :not(seletor)   去除所有与给定选择器匹配的元素     集合元素
            :even       选取索引是偶数的所有元素，索引从0开始  集合元素
            :odd        选取索引是奇数的所有元素，索引从0开始  集合元素
            :eq(index)  选取索引等于index的元素，索引从0开始   集合元素
            :gt(index)  选取索引大于index的元素，索引从0开始   集合元素
            :lt(index)  选取索引小于index的元素，索引从0开始   集合元素
            :header     选取所有的标题元素，h1, h2 等          集合元素
            :animated   选取当前正在执行动画的所有元素         集合元素
          练习
            $("div:first").css("background", "#ff0000");        // 修改第一个div的 background 属性
            $("div:last").css("background-color", "#0000ff");   // 修改最后一个div的 background 属性
            $("div:not(.one)").css("background", "#00ff00");    // 修改类不是one的所有div的 background 属性
            $("div:even").css("background", "#eeeeee");         // 修改索引是偶数的div的 background 属性; odd 用法相同
            $("div:gt(3)").css("background", "#44eeff");        // 修改索引大于3的div的 background 属性; lt,eq 用法相同
            $(":header").css("background", "#66aa66")           // 修改所有标题的 background 属性
            $("div:animated").css("background", "#aa6666")      // 修改当前正在执行动画的div的 background 属性
        内容过滤
            过滤规则主要体现在所包含的子元素和文本内容上
            :contains(text)     选取含有文本内容为text的元素        集合元素
            :empty              选取不包含元素或文本的空元素        集合元素
            :has(seletor)       选取含有选择器所匹配的元素的元素    集合元素
            :parent             选取含有子元素或者文本的元素        集合元素
          练习
            $("div:contains('di')").css("background", "#ff0000");   // 修改含有文本'di'的div的 background 属性
            $("div:empty").css("background-color", "#0000ff");      // 修改不包含子元素(或文本)的div的 background 属性
            $("div:has(.mini)").css("background", "#00ff00");       // 修改含有类为mini的div的 background 属性; 修改的是div,而不是mini
            $("div:parent").css("background", "#eeeeee");           // 修改含有子元素(或文本)的所有div的 background 属性
        可见性过滤
            根据元素的可见和不可见状态来选择相应的元素
            :hidden     选取所有不可见的元素      集合元素
            :visible    选取所有可见的元素        集合元素    
          练习
            $("div:visible").css("background", "#ff0000");          // 修改所有可见的div的 background 属性
            $("div:hidden").show(2000).css("background-color", "#0000ff");      // 将所有不可见的div显出出来，从不可见到显示的时间为2秒，并修改 background 属性
            $("input:hidden").attr("value");                        // 获得所有不可见input元素的属性值
            $("input:hidden")val();                                 // 获得所有不可见input元素的属性值
        属性过滤
            通过元素的属性来获取相应的元素
            [attribute]         选取拥有此属性的元素                  集合元素
            [attribute=value]   选取指定属性的值为value的元素         集合元素
            [attribute!=value]  选取指定属性的值不等于value的元素     集合元素
            [attribute^=value]  选取指定属性的值以value开头的元素     集合元素
            [attribute$=value]  选取指定属性的值以value结尾的元素     集合元素
            [attribute*=value]  选取指定属性的值含有value的元素       集合元素
            [seletor1][seletor2]...[seletorN]   用属性选择器合并成一个复合属性选择器，满足多个条件，每选择一次，缩小一次范围     集合元素    
          练习
            $("div[title]").css("background", "#ff0000");               // 修改含有title属性的div的 background 属性
            $("div[title='test']").css("background-color", "#0000ff");  // 修改title属性值为'test'的div的 background 属性
            $("div[id][title*='es']").css("background", "#ffee44");     // 修改含有id属性，title属性值含有'es'的div的 background 属性
        子元素过滤
            :nth-child(index/even/odd/equation)     选取每个父元素下的第index个子元素或者奇偶元素(index从1开始)        集合元素
                :nth-child(even/odd)    选取每个父元素下的索引值为偶/奇的元素
                :nth-child(2)           选取每个父元素下的索引值为2的元素
                :nth-child(3n)          选取每个父元素下的索引值是3的倍数的元素
                :nth-child(3n+1)        选取每个父元素下的索引值是3n+1的元素
            :first-child        选取每个父元素的第一个子元素      集合元素
            :last-child         选取每个父元素的最后一个子元素    集合元素
            :only-child         匹配某元素是其父元素的唯一子元素的元素     集合元素
            读取子元素，需要在选择器前加一个空格
          练习
            $("div.one :nth-child(2)").css("background", "#ff0000");        // 修改class为one的div的第二个子元素的 background 属性
            $("div.one :first-child").css("background-color", "#0000ff");   // 修改class为one的div的第一个子元素的 background 属性
            $("div.one :last-child").css("background", "#00ff00");          // 修改class为one的div的最后一个子元素的 background 属性
            $("div.one :only-child").css("background", "#eeeeee");          // 修改class为one的div的有且只有一个子元素的 background 属性
        表单对象属性过滤
            对表单元素进行过滤
            :enabled        选取所有可用元素            集合元素
            :disabled       选取所有不可用元素          集合元素
            :checked        选取所有被选中的元素(单选框,多选框)     集合元素
            :selected       选取所有被选中的选项元素(下拉列表)      集合元素
    表单选择器
        :input      选取所有的<input>,<textarea>,<select>,<button>元素     集合元素
        :text       选取所有的单行文本框      集合元素
        :password   选取所有的密码框元素      集合元素
        :radio      选取所有的单选框          集合元素
        :checkbox   选取所有的多选框          集合元素
        :submit     选取所有的提交按钮        集合元素
        :image      选取所有的图象按钮        集合元素
        :reset      选取所有的重置按钮        集合元素
        :file       选取所有的上传域          集合元素
        :hidden     选取所有的不可见元素      集合元素
        练习
            $(":text:enabled").attr("value", "Hello World");    // 修改可用的单行文本框的value属性
            $(":checkbox[name='newsletter']:checked").length;   // 计算name为newsletter的多选框被选中的个数
            $("select :checked").each(function () {             // 被选中的下拉框 因为选中的是<option>节点，所以要有个空格
                alert(this.value);          // each()函数用于遍历得到的选中节点数组，在函数里 this 就是每个被选中的DOM节点对象
            })
3 几个常用方法
    val()   获取或设置表单元素的value属性值
        val() - 获取值
        val("") - 设置值
    attr()  获取或设置表单元素的属性值
        attr(key) - 获取值
        attr(key, value) - 设置值
    each()  对JQuery对象进行遍历，参数为function，函数内的this代表正在遍历的DOM对象
    text()  和val()方法类似，
        text() - 获取元素节点的文本子节点的值
        text("") - 设置元素节点的文本子节点的值
4 知识点练习
    1. 隐式迭代
        $("p").click(function(){        // 为所有的P节点都添加了click函数
            // 在函数内，this是DOM对象，所有如果想使用JQuery的方法，需要使用 $(this) 包装
            alert($(this).text());      // 弹出P节点的文本值内容 
            $(this).text("Hello World");    // text()有参数是为属性节点设置文本值
        });
    $.trim(str) - 去除字符串的前后空格
    $("tr").find("td:first")
        查找tr下第一个td子节点
    focus()     获取焦点
    blur()      失去焦点
    this.defaultValue - 默认值
5 节点操作
    JQuery中的DOM对象
        DOM - 一种与浏览器，平台，语言无关的接口，使用该接口可以轻松地访问页面中所有标准组件
        DOM操作分类
            DOM Core
                不属于JS 可用来处理任何一种用标记语言编写出来的文档，如XML
            HTML DOM
                
            CSS-DOM
                主要用于获取和设置style对象的各种属性
    查找节点
        查找属性节点 - 通过选择器查找到节点
        操作属性节点 - 通过 attr() 方法获取各种属性值
        操作文本节点 - 通过 text() 方法操作
    创建节点 
        $(html) - 根据传入的HTML标记字符串创建一个DOM对象，并把这个DOM对象包装成一个JQuery对象
            不会自动的插入到文档中
            需要使用完成的闭合标签，使用完整的XHTML格式
    插入节点
        append()        向每个匹配的元素的内部结尾处追加内容
        appendTo()      将每个匹配的元素追加到指定的元素中的内部结尾处
        prepend()       向每个匹配元素的内部开始处插入内容
        prependTo()     将每个匹配的元素插入到指定的元素内部的开始处
        after()         向每个匹配的元素的之后插入节点
        insertAfter()   将每个匹配的元素插入到指定的元素之后
        before()        向每个匹配的元素的之前插入内容
        insertBefore()  将每个匹配的元素插入到指定的元素之前
        例子
            // 插入节点 - 子节点
            $("<li>郑州</li>").appendTo($("#city"));      // 加到结尾处
            $("#city").append("<li>郑州</li>");
            $("<li>郑州</li>").prependTo($("#city"));     // 加到开始处
            $("#city").prepend("<li>郑州</li>");
            // 插入节点 - 兄弟节点
            $("<li>insertAfter</li>").insertAfter($("#ra"));
            $("#ra").after("<li>after</li>");
            $("<li>insertBefore</li>").insertBefore($("#bj"));
            $("#bj").before("<li>before</li>");
    删除节点
        remove() - 删除所有匹配的元素，节点包含的子节点同时被删除
        empty() - 清空节点
    复制节点
        clone()     克隆匹配的DOM元素，返回值为克隆后的副本，克隆后的节点不具有任何作为
        clone(true) 复制元素的同时也复制其中的事件
        练习
            $("#bj").clone().attr("id", "bj2"); // 会将原来的id一同复制，就会变成有两个相同id的节点，通过attr()对id进行处理
    替换节点
        replaceWith()   将所有匹配的元素都替换为指定的HTML或DOM元素
        replaceAll()    颠倒了 replaceWith 的用法
        NOTE : 若在替换之前，在元素上绑定了事件，替换后原先绑定的事件会与原先的元素一起消失
            附带有移动的功能
            var $ra = $("#ra").replaceWith($bj);    // 返回的是被替换的节点
        Example
            $("<li>Beijing</li>").replaceAll($("#city :last"));
            $("#city li:last").replaceWith("<li>Beijing</li>");
            互换节点 - 互换后 ra 节点不再有点击事件(现bj处)
                var $clone = $("#bj").clone(true);
                var $ra = $("#ra").replaceWith($clone);
                $("#bj").replaceWith($ra);  
    包裹节点
        wrap()      将指定节点用其它节点包裹起来
        wrapAll()   将所有匹配元素用一个元素包裹起来
        wrapInner() 将每个匹配的元素的子内容(包括文本节点)用其他结构化标记包裹起来
        NOTE
            一般用作网页特效
        Example
            $("li").wrap("<font color='red'></font>");      // 会将每个li节点用 <font></font> 包裹上
            $("li").wrapAll("<font color='red'></font>");   // 将所有的li看作一个整体，包裹起来
                // 如果其不属于同一父节点，会将所有的li节点移动到同一父节点下
            $("li").wrapInner("<font color='red'></font>"); // 只包裹li节点里的文字
6 属性操作
    attr()      获取属性和设置属性
        1个参数 - 获取属性
        2个参数 - 设置属性
        其它的像 html(), text(), val(), height(), width(), css() 等都是一个函数同时实现获取和设置的功能
    removeAttr()    删除指定元素的指定属性
    html()      读取和设置某个元素中的HTML内容 可用于XHTML，但不能用于XML
    text()      读取和设置某个元素中的文本内容 即可用于XHTML，也可用于XML
    val() 练习
        $("#single_select").val("选择3号");               // 修改单选下拉框的选中选项
        $("#mul_select").val(['选择2号', '选择4号']);     // 修改多选下拉框的选中选项
        $(":checkbox[name='checkbox']").val(["多选2", "多选4"]);    // 修改多选框中选中的选项
        $(":radio[name='single']").val(["单选2"]);        // 修改单选框中选中的选项,单选赋值也是一个数组
        
        alert($("#single_select").val())       // 显示单选下拉框被选中的
        alert($("#mul_select").val())          // 显示多选下拉框被选中的
        alert($(":checkbox:checked").val());   // 只显示1个被选中的
        alert($(":radio:checked").val());      // 显示被选中的单选框
    NOTE
        val() 不能直接获取checkbox被选择的值，如果直接获取，得到的结果是第一个被选中的结果。如果想获得被选择的所有结果，需要使用each()方法
              可直接获得radio被选择的值
7 样式操作
    获取和设置class
        class是元素的一个属性，用 attr() 获得
    追加样式    addClass()
    移除样式    removeClass()
        从匹配的元素中删除全部或指定的CSS
    切换样式    toggleClass()
        控制样式上的重复切换. 如果类名存在删除它，不存在就添加它
    判断样式    hasClass()
        判断元素中是否含有某个class，如果有返回ture, 没有返回false
    css()       获取和设置元素的样式属性
        opacity     透明度[0-1]
    height()    获取和设置元素的高度
    width()     获取和设置元素的宽度
    offset()    获取元素在当前视图中的相对位移
        返回对象包含了两个属性: top, left
        $().offset().top, $().offset().left
8 事件处理
    加载DOM
        1. window.onload = function() {}
            执行时机 - 必须等网页中的所有内容加载完毕后(包括图片)才能执行  如果图片比较大，加载速度可能会慢
            编写个数 - 不能同时编写多个
            无简化语法
        2. $(function(){})  // $(document).ready(function(){})
            执行时机 - 网页中的DOM结构绘制完毕后就执行，可能DOM元素关联的东西并没有加载完
            编写个数 - 能同时编写多个
            简写 - $(function(){})
    事件绑定
        var flag = $(".content").is(":hidden");     // 判断类content是否是隐藏状态
        $node.show()      使隐藏的变为显示
        $node.hide()      使显示的变为隐藏
        $node.mouserover(function)      移到元素上的事件
        $node.mouserout(function)       移出元素的事件
        $body.mousemove(function())     鼠标的移动事件
        绑定事件的方法
            1. $().click(function(){})
            2. $().bind("click", function(){})
    合成事件
        hover(function1, function2)     模拟光标悬停事件
            光标移动到元素上时触发function1,光标移出这个元素时触发function2
            效果同 mouserover(function) - 移到元素上, mouserout(function) - 移出元素
        toggle(f1, f2, ...)        模拟鼠标连续单击事件
            第一次点击触发f1,第二次触发点击触发f2,....
        toggle()        切换元素的可见状态
    事件冒泡
        事件会按照DOM结构像水泡一样不断向上直到顶端
        <body>
            <div id="content">
                外层div元素
                <span>内层span元素</span>
                外层div元素
            </div>
        </body>
        同时给 body, div, span 添加点击事件，点击span的时候，会同时触发这三个事件。如果在span的点击事件里加上'return false'，就会有效的阻止触发 body 和 div 的点击事件
    事件对象的属性
        事件对象 - 当触发事件时，事件对象就被创建了，在程序中使用事件只需要为函数添加一个参数 
        $("body").mousemove(function(event){    // event 只是参数名，可以随便写
                event.pageX
                event.pageY
        })
            事件 - 当鼠标移动时，就会触发 mousemove 事件
            事件对象 - event
            事件对象的属性 - pageX, pageY
    移除事件
        $().unbind("click")         移除点击事件
        $().unbind();               移除所有事件
        $().one("click", function)  为元素绑定点击事件处理函数，只能触发一次，触发后事件被删除
9 动画
    hide(), show()
        会同时增大或减少内容的高度，宽度和不透明度
        hide()  功能同  css("display", "none")
        无参 - 立即执行方法，不会有动画效果
        有参 
            1个 - 动画时长 例:1000
    fadeIn(),fadeOut()      只改变元素的透明度
        fadeOut - 在一定的时间降低元素的不透明度，知道完全消失
        fadeIn - 相反
    slideDown(), slideUp()  只改变元素的高度
        如果display属性为none,调用slideDown时，此元素会由上至下延伸显示；slideUp相反，由下至上缩短隐藏
    toggle()        切换元素的可见状态
        如果是可见的，切换为隐藏；隐藏的则切换为可见的
    slideToggle()   通过高度变化来切换匹配元素的可见性
        效果同toggle(),只是此方法改变的是高度
    fadeToggle()    通过透明度来切换元素的可见性
    fadeTo()        不透明度以渐进的方式调整到指定的值[0-1]
        p1 - "slow", "fast"
        p2 - [0-1]
10 练习
    js-query-ex-6.html
    知识点 
        var $hideCategory = $("li:gt(5):lt(7)");        // lt(7)是在gt(5)的基础上进行比较的，是先从所有的li中找到index大于5点，然后从这些大于5点节点中找到小于7点
            // 不适应用作大于小于操作
        var $hideCategory = $("li:gt(5):not(:last)");   // 大于5点节点，并且排除掉最后一个
        $("li:contains('佳能'), li:contains('尼康'), li:contains('奥林巴斯')").addClass("promoted");
            // 首先是多条选择器合并在一起的，得到符合条件的多个节点
            // 之后是为这些节点设置高亮显示，通过添加class做到的
        $(".showmore >a >span").css("background", "url(img/up.gif) no-repeat 0 0");
            // 更改背景图片 - 通过修改 background 属性来完成
格式
<style type="text/css">
    /* 定义格式 */  /* 一定要注意在sytle里的注释是使用 /* */ */
    div, span, p {
        width: 140px;
        height: 140px;
        margin: 5px;
        background: #CCCCFF;
        border: #000000 1px solid;
        float: left;
        font-size: 17px;
        font-family: Verdana;
    }
    div.mini {
        width: 55px;
        height: 55px;
        background-color: #CCCCFF;
        font-size: 12px;
    }
    div.hide{
        display: none;
    }
</style>
<link href="css/style.css" type="text/css" rel="stylesheet">
<script type="text/javascript">
    function anmateIt() {
        $("#mover").slideToggle("slow", anmateIt);
    }

    anmateIt();
</script>
<body>
<div class="one" id="one">
    id为one, class为one的div
    <div class="mini">class为mini</div>
</div>
<div class="one" id="two" title="test">
    id为two, class为one, title为test的div
    <div class="mini" title="other">class为mini,title为other</div>
    <div class="mini" title="test">class为mini,title为test</div>
</div>
<div class="one" id="three">
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini"></div>
</div>
<div class="one">
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini">class为mini</div>
    <div class="mini" title="test">class为mini,title为test</div>
</div>
<div style="display: none" class="none">style的display为'none'的div</div>
<div>包含input的type为'hidden'的div<input type="hidden" size="8"/></div>
<span id="span">^^span元素^^</span>
<select id="single_select">
    <option>选择1号</option>
    <option>选择2号</option>
    <option>选择3号</option>
    <option>选择4号</option>
</select>
<select id="mul_select" style="height: 150px;" multiple="multiple">
    <option selected="selected">选择1号</option>
    <option>选择2号</option>
    <option selected="selected">选择3号</option>
    <option>选择4号</option>
    <option>选择5号</option>
</select>
<input type="checkbox" name="checkbox" value="多选1"/>多选1
<input type="checkbox" name="checkbox" value="多选2"/>多选2
<input type="checkbox" name="checkbox" value="多选3"/>多选3
<input type="checkbox" name="checkbox" value="多选4"/>多选4
<br><br>
<input type="radio" name="radio" value="单选1"/>单选1
<input type="radio" name="radio" value="单选2"/>单选2
<input type="radio" name="radio" value="单选3"/>单选3
</body>