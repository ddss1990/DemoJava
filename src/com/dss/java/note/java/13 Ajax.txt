/**
* Ajax
* 视频时间 : 2013/12/16
* 学习时间 : 2018/12/5
*/
1 Ajax - Asynchronous JavaScript and XML
    允许浏览器与服务器通信而无需刷新当前页面的技术
    不用刷新整个页面就可与服务器通讯的方法
        Flash
        Java applet
        框架 - 如果使用一组框架构造了一个网页，可以只更细其中一个框架，而不用更新整个页面
        隐藏的iframe
        XMLHttpRequest
            是对JS的一个扩展，可使网页与服务器进行通信
            是创建Ajax应用的最佳选择
            实际上通常把Ajax当作XMLHttpRequest对象的代名词
    Ajax不是一项技术，是几种技术
        服务端语言 - 需要具备发送特定消息的能力，Ajax与服务端语言无关
        XML - 描述数据的格式
            Ajax需要某种格式化的格式在服务器和客户端之间传递消息，XML是其中一种选择
        XHTML/CSS - 标准化呈现
        DOM - 实现动态展示和交互
        XMLHttpRequest - 异步数据读取
        JS - 绑定和处理所有数据
2 XMLHttpRequest
    DOM方式
        创建对象
            var xml = new XMLHttpRequest();
        方法
            open(method, url)   建立对服务器的调用
                method - 请求的方式
                url - 请求的地址 一般会在请求会边加上一个时间戳，为了达到禁用缓存的目睹
                    var url = "" + "?time=" + new Date;
            send(content)       发送请求,用于发送POST请求时候的数据
            setRequestHeader(header, value)     Post请求的时候使用
        属性
            onreadystatechange  每个状态的改变都会触发此事件处理器
                本事件由服务器触发，而不是用户
            readyState          请求状态
                0-未初始化, 1-正在加载, 2-已经加载, 3-交互中, 4-完成
            status              服务器的HTTP状态码(200-OK, 404-Not Found)
            responseText        服务器返回的一个文本(字符串)
            responseXML         服务器返回的一个XML属性
        例子
            window.onload = function () {
                var request = new XMLHttpRequest();     // 创建请求对象
                var method = "GET";                     // 请求方式
                var url = "";                           // 请求地址
                request.open(method, url);              // 和服务器建立连接关系
                request.send(null);                     // 发送内容，如果不用发送的话就写null
                request.onreadystatechange = function() {       // 监听状态变化
                    if (request.readyState == 4) {      // 请求完成
                        if(request.status == 200 || request.status == 302) {        // 请求成功
                            alert(request.responseText);        // 获得响应结果
                        }
                    }
                }
            }
            // POST请求
            var method = "POST";                        // 设置请求方式为POST
            request.setRequestHeader("ContentType", "application/x-www-form-url-urlencoded");   // 设置请求头
            request.send("name='tom'");                 // 发送请求数据
    JQuery
        概述
            JQuery对Ajax操作进行了封装，封装了3层
            最底层 - $.ajax()
            第二层 - load(), $.get(), $.post()
            第三层 - $.getScript(), $.getJSON()
        核心方法
            load(url, [data], [callback])       最简单和常用的方法
                url - 连接
                data - 发送到服务器的数据,JSON格式
                callback - 回调函数
                能载入远程的HTML代码并插入到DOM中
                细节
                    1. 如果想从远程HTML代码中选出所需要的内容，可通过URL参数指定选择符  'url selector'
                        selector 用法同JQuery中的用法。 如 "url h2" - 只保留结果中的h2部分
                        // 请求的结果仍然是全部，是在请求的结果上进行的选择器过滤
                    2. 如果没有data参数，使用的是GET方式请求；如果有data参数，使用的是POST请求方式
                    3. 回调函数用于处置在加载完成后进行的操作，该函数有3个参数
                        data - 代表请求返回的内容
                        textStatus - 代表请求状态
                        XMLHttpRequest - 请求对象
                总结
                    1. 所有的HTML节点都能使用load方法来加载Ajax，将结果直接插入到HTML节点中
            $.get(url, [data], [callback], [type]
                type - 服务器返回内容的格式，包括 xml, html, script, json, text 和 _default
                callback - 回调函数，响应结束时触发。 只有两个参数
                    data - 返回的内容
                    textStatus - 请求状态，值可为: success, error, notmodify, timeout
        例子
            $(function(){
                // 一个最简单的例子
                var data = {"time":new Date()};
                $("#content").load(url, data);        // 加载url链接中的内容到content中 content是个div
                
                // $.get()例子
                $.get(url, data, function(response, textStatus){
                    var name = $(response).find("name").text();
                    var website = $(response).find("website").text();
                    var email = $(response).find("email").text();
                });
                
                // 请求JSON格式的数据
                $.get(url, data, function(response, textStatus){
                    var name = response.person.name;    // 如果在后边指定type为'JSON',则返回的就是JSON对象
                }, "JSON");
                $.getJSON(url, data, function(response, textStatus)(){
                    var name = response.person.name;    // 返回的response直接就是一个JSON对象
                });
            })
3 数据格式
    接受服务器响应的数据的格式
    XML
        1. 获得响应结果
            var result = request.responseXML;
        2. 解析XML
            XML格式
                <?xml version="1.0" encoding="utf-8" ?>
                <details>
                    <name>Andy Budd</name>
                    <website>http://andybudd.com/</website>
                    <email>andy@clearleft.com</email>
                </details>
            解析后的格式
                <h2><a href="mailto:andy@clearleft.com">Andy Budd</a></h2>
                <a href="http://andybudd.com/">http://andybudd.com</a>
            a. 首先从XML中解析出数据
                var name = result.getElementsByTagName("name")[0].firstChild.nodeValue;
                var website = result.getElementsByTagName("website")[0].firstChild.nodeValue;
                var email = result.getElementsByTagName("email")[0].firstChild.nodeValue;
            b. 利用解析出的数据，构造成节点
                var nodeH2 = document.createElement("h2");
                var nodeA1 = document.createElement("a");
                nodeA1.href = "mailto:" + email;
                nodeA1.appendChild(document.createTextNode(name));
                nodeH2.appendChild(nodeA1)

                var nodeA2 = document.createElement("a");
                nodeA2.href = website;
                nodeA2.appendChild(document.createTextNode(email));

                // 添加节点前先清空
                detailNode.innerHTML = "";
                detailNode.appendChild(nodeH2);
                detailNode.appendChild(nodeA2);
        缺点
            首先要确保来自服务器的文档含有正确的首部信息，如果文档类型不正确，得到的结果为空
            如果XML文档过长，解析起来比较复杂
        优点
            XML是通用的数据格式
            不必把数据强加到已定义好的格式中，而是为数据自定义合适的标记
            使用DOM可以操作整个文档
    JSON
        JSON是JS的原生格式，以为着在JS中处理JSON不需要特殊的AIP或工具包
        比XML更轻巧
        JSON串
            var json = {"name":"tom", "age":18, address:{"city":Shanghai, "district":"BaoShan"}
                    "speak":function(){  alert("Hello world");   }}
                // 可存储 字符串、数字、布尔值 以及 函数
            var name = json.name;
            var address = json.address;
            json.speak;
        解析JSON
            存储在 request.responseText 中
            var jsonText = request.responseText;        // 这里得到的只是字符串，还需要转成对象
            var json = eval("(" + jsonText + ")");      // 将JSON字符串转为JSON对象
        eval(str)
            会将str转为本地JS代码，进而执行
        优点
            与XML相似，但是更灵巧
            不需要从服务器端发送含有特定内容类型的首部信息
        缺点
            语法过于严谨
            代码不易读
            eval 函数存在风险
    HTML
        HTML由一些普通文本组成，文本储存在 request.responseText 中，可以直接将其插入到页面中，使用 innertHTML 属性
        node.innertHTML = request.responseText;
        优点
            从服务端发送的HTML代码不需要用JS解析
            HTML的可读性好
            HTML代码块与innertHTML属性搭配，效率高
        缺点
            不适合更新一个文档的多个部分
            innertHTML 不是DOM操作
4 一个Servlet例子
    web.xml中的配置
        <servlet>
            <servlet-name>validateUserName</servlet-name>
            <servlet-class>com.dss.server.ValidateUserName</servlet-class>
        </servlet>
        <servlet-mapping>
            <servlet-name>validateUserName</servlet-name>
            <url-pattern>/validateUserName</url-pattern>
        </servlet-mapping>
        var                         url
    1   ajax/validateUserName       http://localhost:8080/ajax/ajax/validateUserName
    2   validateUserName            http://localhost:8080/ajax/validateUserName
    3   ${pageContext.request.contextPath}/validateUserName       http://localhost:8080/validateUserName
    只用注解注册 @WebServlet(name = "/validateUserName") 的情况下，3种情况都不能访问到连接
    只在 web.iml 中注册， 3可行 2不可行 1不可行
    JSP
        var url = "";       // 连接地址，如上
        var args = {"userName": name, "time": new Date()};      // 配置要发送的参数
        $.post(url, args, function (data) {     // 使用post方式发送请求
            $("#response").html(data);
        })
    Servlet
        @WebServlet(name = "/validateUserName")
        public class ValidateUserName extends HttpServlet {
            protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                String username = request.getParameter("userName");     // 获得传输来的参数
                ....        // 中间一系列的处理判断        
                response.setContentType("text/html");                   // 设置响应的格式
                response.setCharacterEncoding("utf-8");                 // 设置字符格式
                response.getWriter().print("")                          // 服务器发送数据给客户端
            }
        }
    Servlet配置
        1. 直接在类中配置
            @WebServlet(name = "/validateUserName")
            // 使用这种方式配置的Servlet,实测发现并不能访问到
        2. 在 web.xml 中配置
            <servlet>       // 配置Servlet
                <servlet-name>validateUserName</servlet-name>                   // 定义Servlet的名字
                <servlet-class>com.dss.server.ValidateUserName</servlet-class>  // 定义其对应的类
            </servlet>
            <servlet-mapping>
                <servlet-name>validateUserName</servlet-name>           // 访问的Servlet的名
                <url-pattern>/validateUserName</url-pattern>            // 访问路径
            </servlet-mapping>
    可执行成功的例子
        "validateUserName" - /ajax/validateUserName
        ${pageContext.request.contextPath}/validateUserName - /validateUserName
5 典型用例
    加入购物车
        // 通过请求对象获得购物车对象
        HttpSession session = req.getSession();
        ShoppingCart shoppingCart = (ShoppingCart) session.getAttribute("sc");
        if (shoppingCart == null) {
            shoppingCart = ShoppingCart.getInstance();
            session.setAttribute("sc", shoppingCart);
        }
        从服务端返回的JSON字符串中的单引号不行，必须是双引号才可以
            StringBuilder result = new StringBuilder();
            result.append("{")
                    .append("\"bookName\":\"")
                    .append(id)
                    .append("\",\"bookCount\":")
                    .append(count)
                    .append(",\"totalMoney\":")
                    .append(countPrice)
                    .append("}");
        Web端
            var isHasCart = "${sessionScope.sc == null}";
            if (isHasCart == "true") {
                $("#cartInfo").hide();
            } else {
                $("#cartInfo").show();
                $("#bookName").text("${sessionScope.sc.bookName}");
                $("#bookCount").text("${sessionScope.sc.bookCount);
                $("#totalMoney").text("${sessionScope.sc.totalMoney}");
            }
        Servlet端
            HttpSession session = req.getSession();
            ShoppingCart shoppingCart = (ShoppingCart) session.getAttribute("sc");
            if (shoppingCart == null) {
                shoppingCart = ShoppingCart.getInstance();
                session.setAttribute("sc", shoppingCart);
            }
        Note
            ShoppingCart中可以没有 bookName, bookCount, totalMoney 这三个属性，但是必须有 getBookName, getBookCount, getTotalMoney 这三个方法
            此功能的作用类似于购物车缓存，打开一个新的界面，会显示你保存的购物车信息







https://blog.csdn.net/strivenoend/article/details/78620722
https://www.cnblogs.com/javabg/p/7976977.html