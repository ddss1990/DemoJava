JUC - java.util.concurrent
/**
* 视频时间 : 2016/12/26
* 学习时间 : 2018/11/5
*/
1 volatile & 内存可见性
    内存可见性 - 当多个线程操作共享数据时，彼此不可见
        子线程
            private boolean flag = false;
            public void run() {
                // 加一个延时，再去修改变量的值
                Thread.sleep(200);
                flag = true;
            }
        主线程
            while (true) {
                if(getFlag()) {
                    
                }
            }
        // 理想
            在主线程通过 getFlag() 方法读取到的数据，是从缓存中读取到的，是修改前的数据，这就说明了多个线程操作共享数据时，彼此是不可见的
        // 实际情况
            主线程 getFlag() 方法读到的数据是修改后的数据
    volatile - 当多个线程操作共享数据时，可以保证内存中的数据可见
                相较于 synchronized 是一种较为轻量级的同步策略
    与 synchronized 相比较
        volatile 不具备互斥性。 synchronized 可同时保证只有一个线程访问数据，而 volatile 可以多个线程同时访问。
        volatile 不能保证变量的原子性。
2 原子变量 & CAS算法
    ++操作
        实际上分为三步 读 - 改 - 写
            int i = 10; i++;
        --> int temp = i;  temp = temp + 1;   i = temp;
    原子变量 - AtomicInteger
        1. 内部变量使用 volatile 修饰，保证内存可见性
        2. CAS算法保证数据的原子性
    CAS - Compare And Swap
        硬件对于并发操作共享数据的支持
        包含三个数
            内存值 V  内存中的值，有可能被其它线程修改 expectedValue
            预估值 A  是程序执行前读取到的值(读取的内存值)，有可能在此线程读取之后，其它线程对该值进行了修改 oldValue
            更新值 B
            当且仅当内存值等于预估值时，才将更新至赋值给内存值。否则不做任何操作。
            只有在 expectedValue == oldValue 时，才能说明此值没有被其它线程修改
3 ConcurrentHashMap - 线程安全的哈希表
    对于多线程的操作，介于 HashMap 和 HashTable 之间
    内部采用 锁分段 机制替代 HashTable 的独占锁，底层是用CAS实现的   Collections.synchronizedMap() 底层的实现是通过加同步锁实现的
    HashMap 和 HashTable 的区别
        HashMap - 线程不安全
        HashTable - 线程安全，有锁，会锁住整个表；并发访问HashTables时，由并行转为了串行，一次只能有一个线程访问HashTable。
                存在一些复合操作(例：若不存在则添加)上的问题
    ConcurrentHashMap
        锁分段机制，concurrencyLevel 默认16，意思是有16个段(Segment)，支持16个线程并发写，不可扩容
        每个段中默认有16个元素 ？？？？？（这里不理解啥意思）
    CopyOnWriteArrayList/CopyOnWriteArraySet - 写入并复制
        添加操作多时，效率低，因为每次添加时都会进行复制，开销非常大。并发迭代操作多时可选择
4 闭锁 CountDownLatch
    同步辅助类，在完成一组正在其他线程中执行的操作之前，允许一个或多个线程一直在等待状态。
    简而言之：在完成某些运算时，只有当其他线程的运算全部完成时，当前运算才继续执行。
      // 控制线程中
        // 需要控制多少个线程，N的值就是多少
        CountDownLatch latch = new CountDownLatch(N);
        // 线程进行等待，等待其它线程执行完成，再执行
        latch.await();
      // 被控制线程中
        // 当一个线程执行完毕，就将被控制线程数减去1个
        // 当所有的线程执行完毕，N的值是0
        latch.countDown();
5 创建线程的方式3 - 实现Callable接口
    创建线程的方式一共有四种
        1. Thread
        2. Runnable
        3. Callable
        4. 线程池
    // 定义
    class DemoThread implements Callable<Integer> {
        @Override
        public Integer call() throws Exception {
            
        }
    }
    // 使用，需要 FutureTask 实现类的支持，用于接收结果。   FutureTask 是 Future 接口的实现类
    DemoThread demo = new DemoThread();
    FutureTask task = new FutureTask<>(demo);
    // 执行Callable线程
    new Thread(task).start();
    // 获得执行结果
    // 执行此语句，主线程会进入到阻塞状态，一直阻塞到Callable线程执行完毕，效果等同于闭锁
    task.get();
    
    与Runnable的区别
        1. 允许泛型
        2. 有返回值，返回值就是泛型类型
        3. 可抛出异常
6 同步锁 - Lock
    用于解决多线程安全的问题的方式有三种
        1. 同步代码块 - 隐式锁
        2. 同步方法   - 隐式锁
        3. 同步锁     - 显式锁
    Lock lock = new ReentrantLock();
    lock.lock()      // 上锁
    lock.unlock()    // 释放锁，锁必须要释放
    生产者消费者案例
        生产者生产过快，消费者来不及接受，可能会造成数据丢失的情况
        消费者消费过快，生产者来不及生产，可能会出现重复的数据或错误的数据
        需要在当产品不足时，进行等待(this.wait())，等产品补货完成时，要进行唤醒(this.notifyAll())
            这种方式有可能会造成一方执行完毕，另一方进入等待状态，程序不能结束
        虚假唤醒
            wait()应该使用在循环(while)中，这样才能避免虚假唤醒
7 Condition 线程通信
    Condition接口描述了可能与锁有关联的条件变量。
    Condition condition = lock.newCondition();      // 需要通过锁来获取Condition对象
    Condition 与 Object 中关于锁方法的对应关系
        await()       -->       wait()
        signal()                notify()
        signalAll()             notifyAll()
    线程按序交替
        class Control {
            int number;
            ReentrantLock lock = new ReentrantLock();
            Condition condition1 = lock.newCondition();
            Condition condition2 = lock.newCondition();
            Condition condition3 = lock.newCondition();
            
            // 线程1执行的方法
            public void method1() {
                if (number != 1) {
                    // 当前轮不到1号执行的时候，对1号进行等待处理
                    // 进入到阻塞状态下，下边的代码是执行不了的
                    condition1.await();
                }
                // 线程1执行完毕，唤醒线程2
                number = 2;
                condition2.signal();
            }
            // 线程2执行的方法 
            public void method2() {
                if (number != 2) {
                    // 还没到线程2执行的时候，进入到阻塞状态
                    condition2.await();
                }
                // 线程2执行完毕，唤醒线程3
                number = 3;
                condition3.signal();
            }
            // 线程3执行的方法
            public void method3() {
                if (number != 3) {
                    // 还没到线程3执行的时候，进入到阻塞状态
                }
                // 线程3执行完毕，唤醒线程1
                number = 1;
                condition1.signal();
            }
        }
        // 进行线程控制的时候，只需要创建一个线程对象
        Control control = new Control();
        // 在不同的线程中，调用分别的方法即可达到线程控制的目的
        control.method1();   // 在线程的run()方法中调用
8 ReadWriteLock - 读写锁
    读没有线程安全问题
    可以同时读，不能同时写，不能同时又读又写 
    // 创建读写锁对象，因为 ReadWriteLock 是接口，需要用其实现类
    ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
    // 获得读锁
    ReentrantReadWriteLock.ReadLock readLock = readWriteLock.readLock();
    // 获得写锁
    ReentrantReadWriteLock.WriteLock writeLock = readWriteLock.writeLock();
    // ReadLock WriteLock 都是 Lock 的子类，加锁释放锁使用 lock() 和 unlock() 方法
9 线程八锁
    前提
        class Number {
            public [static] synchronized void getOne() {  System.out.println("one");  }
            public synchronized void getTwo() {  System.out.println("Two");  }
            public void getThree() {  System.out.println("Three");  }
        }
    情况
        1. 两个普通同步方法，一个Number对象，两个线程
            one  two
        2. 两个普通同步方法，方法1加延时1秒，一个Number对象，两个线程
            one two
        // 之后的方法1都有sleep
        3. 两个普通同步方法，一个普通方法，一个Number对象，三个线程
            three one two
        4. 两个普通同步方法，两个Number对象，两个线程
            two one
        5. 一个静态同步方法，一个同步方法，两个线程
            two one
        6. 两个静态同步方法，两个线程
            one two
        7. 一个静态同步方法，一个非静态同步方法，两个对象，两个线程
            two one
        8. 两个静态同步方法，两个对象，两个线程
            one two
    总结
        1. 非静态同步方法的锁为 this , 静态同步方法的锁为 Number.class
        2. 针对同一个锁，在同一时刻，只能有一个线程持有该锁
10 线程池
    提供了一个线程队列，队列中保存着所有等待状态的队列，避免了创建与销毁的额外开销，提高了响应速度
    核心接口 - Executor  java.util.concurrent     负责线程的使用和调度的根接口
        |--  ExecutorService  线程池的主要接口
            |--  ThreadPoolExecutor  线程池的实现类
            |--  ScheduledExecutorService  子接口，负责线程的调度
                |-- ScheduledThreadPoolExecutor  实现类，继承了 ThreadPoolExecutor ，实现了 ScheduledExecutorService 既有线程池的功能，又可以进行线程的调度
    ExecutorService
        工具类 Executors
            Executors.newCachedThreadPool()             // 缓存线程池，线程池的数量不固定，根据需求，自动更改数量
            Executors.newFixedThreadPool(int)           // 固定大小的线程池
            Executors.newSingleThreadExecutor()         // 单独的线程池，内只有一个线程，预设定适用于大部分的情况
            newScheduledThreadPool()                    // 固定大小的线程池，可以延迟或定时的执行任务
        ExecutorService executor;
        // 为线程池分配任务
        executor.submit(Runnable/Callable);
        // 关闭线程池
        executor.shutdown();
    线程调度
        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(5);
        // 调度执行，也就是延时执行
        scheduledExecutorService.schedule(Runnable/Callable, long, TimeUnit)
            arg2 - long
            arg3 - 时间单位，例如 TimeUnit.SECODNS
        scheduledExecutorService.shutdown();
11 ForkJoinPool 分支/合并框架 工作窃取
    Fork/Join 框架
        将一个大任务，进行拆分(fork)成若干个小任务(拆到不可再拆时)，再将一个个小任务运算的结果进行汇总(join)
    工作窃取模式
        将小任务加入到线程队列中，有的线程队列可能发生阻塞，有的没有，就会出现有的线程处于空闲状态。
        从一个随机的线程队列中(前提是队列中有任务)偷一个并把它放在自己的队列中。
    RecusiveTask            // 有返回值
    RecusiveAction          // 无返回值
    如果想实现 Fork/Join 框架，需要继承上边的两个类之一
        class TestForkJoin extends RecusiveTask<Object> {
            @Override
            public Object compute() {
                // 在这里进行任务的拆分和合并
                // 拆分需要再次创建本类对象，有点像递归
                TestForkJoin left = new TestForkJoin();
                left.fork();            // 向左拆分
                TestForkJoin right = new TestForkJoin();
                right.fork();           // 向右拆分
                
                // 汇总
                return left.join() + right.join();
            }
        }
    // Fork/Join 框架的类的执行，需要依赖于一个 ForkJoinPool
        ForkJoinPool pool = new ForkJoinPool();
        // 这里一定要使用 TestForkJoin 的父类 ForkJoinTask
        ForkJoinTask<Object> task = new TestForkJoin();
        // 执行拆分与汇总
        pool.invoke(task);

    ps. JAVA8一些使用
    // 计算程序执行时间
        // 记录此刻的时间
        Instant begin = Instant.now();
        Instant end = Instant.now();
        Duration.between(begin, end).toMillis();        
    // 求和
        long sum = LongStream.rangeClosed(start, end).parallel().reduce(0L, Long::sum);
        
        
HashMap ConcurrentHashMap
    ConcurrentHashMap
        一个 ConcurrentHashMap 默认有16个 Segment， 并且不可扩容。Segment 内部是由 数组+链表 组成的。
        loadFactor = 0.75;    阈值 1.5，插入的元素个数超过阈值时才会触发扩容，此负载因子是为Segmeng内部用的
        concurrencyLevel = 16;  // 默认
        sshift = 4;  ssize = 16;
        segmentShift = 28;  segmentMark = 15;
        