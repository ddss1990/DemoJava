持久化 - 把数据保存到可掉电式存储设备中以供之后使用
JDBC - Java Database Connectivity, 是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口(一组API)
    为不同的数据库提供了统一的一种途径。
    API
        面向应用的API - Java API,抽象接口，供developer使用(连接数据库，执行SQL语句，获得结果)
        面向数据库的API - Java Driver API, 供开发商开发数据库驱动程序用
    1 获取数据库连接对象
        1.1 通过Driver接口获取数据库对象 
          // 创建一个Driver实现类的对象
          Driver driver = new Driver();              // com.mysql.cj.jdbc.Driver
          // 准备连接数据库的基本信息: url, user, password
          String url = "jdbc:mysql://localhost:3306/test" + "?serverTimezone=GMT%2B8";
          Properties info = new Properties();
          info.put("user", NAME);
          info.put("password", PWD);
          // 获取数据库连接
          Connection connection = driver.connection(url, info);
          
          URL - 协议:<子协议>:<子名称>
            协议 - 总是 jdbc
            子协议 - 用于标识一个数据库驱动程序
            子名称 - 一种标识数据库的方法
            jdbc:mysql://localhost:3306/test
          Orcale
            orcale.jdbc.driver.OrcaleDriver    -  jdbc:orcale:thin:@localhost:1521:test   
        通用的获取数据库连接对象 - 解耦
            // 将连接数据库所用到的信息都存入到该文件中，通过ClassLoader得到输入流
            InputStream inputStream = getClass().getClassLoader().getResourceAsStream(name);
            Properties properties = new Properties();
            properties.load(inputStream);
            
            // 从Properties读取指定的数据
            String driverClass = properties.getProperty("driver");
            String jdbcUrl = properties.getProperty("jdbcUrl");
            String user = properties.getProperty("user");
            String password = properties.getProperty("password");
            
            // 封装连接数据库所用到的信息
            Properties info = new Properties();
            info.put("user", user);
            info.put("password", password);
            
            // 通过反射去获得Driver对象，然后再去执行connect方法连接数据库并获得连接对象
            Class<?> aClass = Class.forName(driverClass);
            Object o = aClass.newInstance();
            Method connection = aClass.getMethod("connection", String.class, Properties.class);
            Connection connection = (Connection) connection.invoke(o, jdbcUrl, info);
            
            // 这里也可以直接使用Driver类，这里的Driver类是java.sql. 下的，是所有各个数据库厂商定义的Driver的父类
            java.sql.Driver driver = (java.sql.Driver) Class.forName(driverClass).newInstance();
            Connection connection = driver.connection(jdbcUrl, info);
        1.2 通过DriverManager获取数据库连接对象 
            // 加载数据库驱动程序，这里应该是注册驱动，但是通过观察源码发现，在Driver的实现类中，有静态代码块，用于注册驱动。
            // 故这里只需要加载指定的类即可
            Class.forName(driverClass);
            Connection connection = DriverManager.getConnection(jdbcUrl, user, password);
          好处
            1. 可直接通过重载的 getConnection() 方法获取数据库连接对象，较为方便。
            2. 同时管理多个驱动程序，会根据 url 的不同，去获得不同的连接对象
    2 通过Statement执行更新操作
        // 通过数据库连接对象获得Statement对象
        Statement statement = connection.createStatement();
        // 执行SQL语句，insert, delete, update
        statement.execute(sql);
        statement.executeUpdate(sql);
        // 关闭Statement和数据库连接
        statement.close();  connection.close();
        方法比较
            execute()       - 用于执行返回多个结果集、多个更新计数或二者结合的语句，仅在语句能返回多个ResultSet对象、多个更新计数或ResultSet对象与更新计数组合时使用。
            executeQuery()  - 用来执行 select 查询语句
            executeUpdate() - 用于执行 insert, update, delete 以及 DDL(建表，删表等)。返回值代表影响的行数。当是DDL时，返回值是0。
    3 ResultSet执行查询操作
        ResultSet - 结果集，封装了使用JDBC进行查询的结果
        // 获得结果集
        ResultSet set = statement.executeQuery(sql);
        // 获得每一行
        while (set.next()) {        // 判断是否有下一行，如果有，自动指向下一行 
            // 获得每一列
            int id = set.getInt("_id");
            String name = set.getString(2);
            Date birth = set.getDate("brith");
            String email = set.getString("email");
        }
        // 关闭结果集
        set.close();
    4 PreparedStatement - 是Statement的子接口，提供了占位符功能，index从1开始
        /**
        * java.sql.Date 对象   new Date(long date);
        * date 代表毫秒数
        * 如果抽方法的话，可以将参数设置成可变参数   
        * insertData(String sql, Object ... args)
        */
        // 编写SQL语句，使用?代替列
        String sql = "insert into NAME values(?,?,?...);
        // 获得PreparedStatement对象
        PreparedStatement statement = connection.prepareStatement(sql);
        // 设置占位符的值
        statement.setString(index, value);
        // 执行Statement
        statement.executeQuery();  或
        statement.executeUpdate();
      好处
        有效的防止SQL注入，因为SQL是拼写的
            String user = "Tom";
            String password = "123123";
            String sql = "select * from users where user = '" + user + "' and password = '" + password + "';";
            // 如果正常写用户名和密码，不会出现问题；但当恶意的拼接SQL语句后，会出现问题
            String user = "a' or password = ";
            String password = " or '1' = '1'";   
            // 拼接后的SQL语句
            sql = "select * from users where user = 'a'
                                    or password = ' and password = '
                                    or '1' = '1'";
        提高可读性
        最大可能提高性能
    5 元数据 - 有关数据库管理系统的各种信息(数据库中的各个表，表中的各个列，数据类型，触发器，存储过程等)
        ResultSetMetaData - 结果集的元数据，用于获取关于ResultData对象中列的类型和属性信息的对象
            是描述ResultSet的元数据对象，可从中得到列名等信息。
          一些方法
            getColumnCount()                     # 查询了多少列
            getColumnName(int index)             # 获取指定列的列名，从1开始
            getColumnLabel(int index)            # 获取指定列的别名，从1开始
        private <T> T getObject(Class<T> clazz, String sql, Object ... args)
            为查询的列加别名，别名对应于类中的变量名，只有名称匹配时，才能通过反射去设置变量的值
            // 通过 ResultSet 得到 ResultSetMetaData
            ResultSetMetaData meta = set.getMetaData();
            // 通过 ResultSetMetaData 去获得每个列的别名，并通过 ResultSet 获得每个列的值
            int count = meta.getColumnCount();
            for (int i = 0; i < count; i++) {
                String label = meta.getColumnLabel(i + 1);
                Object o = set.getObject(label);
            }
        DatabaseMetaData - 数据库的元数据
            DatabaseMetaData meta = connection.getMetaData();
            int version = meta.getDatabaseMajorVersion();      // 版本号
            String user = meta.getUserName();                  // 连接数据库的用户名
            ResultSet set = meta.getCatalogs();                // 得到Mysql中有哪些数据库
            set.getString(1);
        
    6 DAO - Data Access Object
        访问信息数据的类，包含了对数据的CRUD(create, retrieve ,update, delete)，而不包含任何业务相关的信息。
        实现功能的模块化，更利于代码的维护和升级。
        可以被子类继承或直接使用。
        应该包含的方法：
            // 更新操作，包含 insert, update, delete
            void update(String sql, Object ... args)
            // 查询一条记录，返回对应的对象
            <T> T getObject(Class<T> clazz, String sql, Object ... args)
            // 查询多条记录，返回一个列表
            <T> List<T> getObjectLists(Class<T> clazz, String sql, Object ... args)
            // 返回某条记录的某个字段的值或一个统计的值(一共有多少条记录等)
            <E> E getValue(String sql, Object ... args)
                // 执行SQL的结果只能是一行一列，通过结果集去获得查询的结果
                set.getObject(1);
        jar包
            commons-beanutils
            commons-logging
            commons-dbcp
            commons-dbutils
        BeanUtlils  // 依赖于 commons-beanutils 和 commons-logging
            setProperty(Object obj, String name, Object value)
                // 会为 Object 的对象中的 name 字段通过 setXXX 方法赋值
            getProperty()
                // 会通过 Object 对象中的 getXXX 方法获得 name 字段的值
    7 获得主键值(插入一个数据，没有手动的设置主键的值，可以得到插入数据的主键的值)
        prepareStatement(String sql, int autoGeneratedKeys)
            autoGeneratedKeys - 
                Statement.RETURN_GENERATED_KEYS - 返回生成的KEY
                Statement.NO_GENERATED_KEYS     - 不返回
        PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        statement.executeUpdate();
        ResultSet set = statement.getGeneratedKeys();   // 获取包含了新生成的主键的ResultSet对象，此结果集只有一列，列名是 GENERATED_KEY
        set.getObject(1);    // 获得新生成的主键值
    8 LOB - Large Objects 大对象
        用来存储大量的二进制和文本数据的一种数据类型。
        Orcale LOB
            BLOB  - 二进制数据
            CLOB  - 单字节字符数据
            NCLOB - 多字节字符数据
            CLOB 和 NCLOB 用于存储超长的文本数据。
        MySql LOB
            TinyBlob    255 字节
            Blob        65K
            MediumBlob  16M
            LongBlob    4G
        如果存储的文件过大，服务器的性能会下降。
        插入BLOB必须使用 PreparedStatement 因为BLOB类型的数据无法使用字符串拼写。
            statement.setBlob(index, Blob/InputStream)        // 插入Blob数据
                参数可以是一个Blob对象，也可以是一个输入流。
            Blob blob = resultSet.getBlob(index/label);       // 读取Blob数据
            InputStream is = blob.getInputStream();           // 通过Blob获取输入流
    9 事务
        Note:
            1. 如果多个操作，每个操作都使用自己的单独连接，则无法保证事务
            2. 需要关闭自动提交，事务的操作都成功再提交，有失败就回滚事务
        connection.setAutoCommit(false);                      // 关闭自动提交，开始事务
        connection.commit();                                  // 提交
        connection.rollback();                                // 回滚
        事务的隔离级别
            connection.setTransactionIsolation(level);        // 设置事务的隔离级别
                Connection.TRANSACTION_READ_UNCOMMITED
                Connection.TRANSACTION_READ_COMMITED
                Connection.TRANSACTION_REPEATBALE_READ
                Connection.TRANSACTION_SERIALIZABLE
                Connection.TRANSACTION_NONE
            connection.getTransactionIsolation();             // 获得事务的隔离级别
            set transaction isolation level read committed;           // 设置数据库的隔离级别，当前连接有效
            set global transaction isolation level read committed;    // 设置数据库事务的隔离级别，全局有效
        // 最好要在用到事务的位置，先设置一下事务级别
        connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITED);
    10 批量处理
        MySQL在处理批量数据时，性能差异不是很大。
        PreparedStatement 在处理批量数据的时候，效率要优于 Statement 因为在创建 PreparedStatement 的时候已经预加载SQL了
        PreparedStatement statement;
        statement.addBatch();                    // 积攒SQL语句，攒到一定量的时候再去执行，能提高效率
        statement.executeBatch();                // 执行积攒的SQL
        statement.clearBatch();                  // 将积攒的SQL清楚掉
        // 不要忘记把积攒的SQL语句全部执行掉
    11 数据库连接池
        必要性
            传统的连接方式(每次建立连接都要将Connection加载到内存中，再验证用户名和密码，需要连接的时候就向数据库要求一个，执行完成后再断开连接)
                这种方式会消耗大量的时间和资源。数据库的链接资源没有很好的重复利用。
            每一次数据库连接，使用完成后都需要断开连接；如果未关闭，程序出现异常就会导致数据库系统的内存泄漏，进而导致数据库系统重启
            这种方式不能控制被创建的连接对象数，系统的资源会被无限制的分配出去，严重的话会导致内存泄漏和系统重启。
        数据库连接池
            为数据库连接建立一个缓冲池，由缓冲池负责分配，管理和释放数据库连接。
            允许用户重复使用一个现有的数据库连接，而不是重新建立一个。
        优点
            资源重用
            更快的系统反应速度
            新的资源分配手段
            统一的连接管理，避免数据库连接泄漏
        DataSource - 数据源，数据库连接池的接口，由子类实现
            DBCP - commons-dbcp(额外依赖 commons-pool, 实测在 IntelliJ 中，可以不用导入 commons-pool)
                BasicDataSource source = new BasicDataSource();
                source.setUsername("");
                source.setPassword("");
                source.setUrl("jdbc:mysql://localhost:3306/test");
                source.setDriverClassName("com.mysql.cj.jdbc.Driver");
                
                // 配置一些信息
                source.setInitialSize(10);       // 指定数据库连接池中初始化连接的个数
                source.setMaxActive(50);         // 指定最大连接数 - 同一时刻同时向数据库申请的连接数
                source.setMinIdle(10);           // 连接池中空闲的连接的最少个数
                source.setMaxWait(1000);         // 从连接池中读取连接的最大等待时长，超时就抛异常
                
                // 从数据源中获取数据库连接对象
                Connection connection = source.getConnection();
                
                BasicDataSourceFactory
                    // jdcp.properties 文件中要写的内容
                    username, password, driverClassName, url,      // 基本配置
                    initialSize, maxActive, minIdle, maxWait       // 连接池配置
                
                    Properties properties = new Properties();
                    InputStream is = getClass().getClassLoader().getResourceAsStream("jdcp.properties");
                    properties.load(is);
                    BasicDataSource source = BasicDataSourceFactory.createDataSource(properties);
    12 
            
        


        
        


        
        
        
        
        
        
        
        
        
        