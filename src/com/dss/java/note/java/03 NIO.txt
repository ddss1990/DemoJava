/** 
* NIO
* 视频时间 2016/12/21
* 学习时间 2018/11/9
*/ 
1 NIO 简介
    NIO - New IO
    1.4引入的，用于替代标准的IO
2 NIO 与 IO 的区别
    NIO 面向缓冲区  非阻塞IO  选择器
    IO    面向流     阻塞IO     无
    IO - 流是单向的
    NIO - 缓冲区双向的
    IO中，在程序与文件之间，通过建立通道进行数据的传输，通道可以类比成水管，只能是单向的，要么是输入流，要么是输出流
    NIO中，程序与文件之间，也是通过通道建立连接的，这里的通道类似于火车道，数据的传输是双向的，是通过操作缓冲区来进行数据的传输的
3 缓冲区 - Buffer   通道 - Channel
    通道表示程序到IO设备(文件、套接字)的连接，缓冲区用来容纳数据，操作缓冲区对数据进行处理
    通道负责传输，缓冲区负责存储。
    缓冲区
        在NIO中，负责数据的存取。缓冲区就是数组。用于存储不同数据类型的数据。
        ByteBuffer, CharBuffer, ShortBuffer, IntBuffer, LongBuffer, FloatBuffer, DoubleBuffer
          // 核心方法
            通过 allocate() 方法获得指定大小的缓冲区
            put();      // 存入数据到缓冲区中
            get();      // 获取缓冲区中的数据
          // 核心属性
            private int mark = -1;      // 标记，表示记录当前position的位置，可通过 reset() 恢复到makr位置
            private int position = 0;   // 位置，缓冲区中正在操作数据的位置
            private int limit;          // 界限，表示缓冲区中可以操作数据的大小，limit后的数据不能进行读写
            private int capacity;       // 容量，缓冲区中最大存储数据的容量，不能修改
            mark <= position <= limit <= capacity
          // 其它方法
            flip();     // 切换读取数据模式
            rewind();   // 可重复读数据
            clear();    // 清空缓冲区，数据并未被清空，数据只是处于被遗忘状态
            hasRemaining();     // 判断缓冲区中是否还有剩余的数据
            remaining();        // 获取缓冲区中可操作的数量
    直接缓冲区与非直接缓冲区
        非直接缓冲区
            通过 allocate() 方法分配缓冲区，将缓冲区建立在JVM内存中
        直接缓冲区 - 内存映射文件
            allocateDirect() 将缓冲区建立在操作系统的物理内存中，可以提高效率，但是不易控制      
            // 只支持 ByteBuffer
            MappedByteBuffer buffer = channel.map(MapMode.READ_ONLY, 0, channel.size());    // 和通过 allocateDirect() 方式一样获取的都是直接缓存区

            有可能会出现文件已经复制完成，但是程序并没有释放对物理内存的映射，这是由于垃圾回收不及时造成的。
            最好在直接缓冲区能在程序性能方面带来明显好处时使用。
        isDirect()      // 判断是否是直接缓冲区
    管道
        用于源节点与目标节点的连接。在NIO中负责缓冲区中数据的传输，本身不存储数据，需要配合缓冲区一起使用。
        DMA - Direct Memory Access
        Channel - 完全独立的处理器，用于IO
        主要实现类  java.nio.channels.Channel
            |-- FileChannel
            |-- SocketChannel
            |-- ServerSocketChannel
            |-- DatagramChannel
        获取通道
          1. 方法1 getChanel()    支持的类
            本地IO
                FileInputStream/FileOutputStream
                RandomAccessFile
            网络IO
                Socket
                ServerSocket
                DatagramSocket
          2. 方法2 静态方法 open()
            FileChannel channel = FileChannel.open(Path, Options);
              Options
                StandardOpenOption.READ     // 读
                StandardOpenOption.WRITE    // 写
                StandardOpenOption.CREATE   // 文件不存在就创建，存在就覆盖
                StandardOpenOption.CREATE_NEW   // 不存在就创建，存在就报错
          3. 方法3 Files 的工具类 newByteChannel()
        // 搭配缓冲区使用 - 非直接缓冲区
            while(inChannel.read(buffer) != -1) {   // 向缓冲区写入数据
                buffer.flip();                      // 转成读取模式
                outChannel.write(buffer);           // 从缓冲区读取数据
                buffer.clear();                     // 清空缓冲区
            }
        // 搭配缓冲区使用 - 直接缓冲区(硬盘映射文件)
            FileChannel inChannel = FileChannel.open(inPath, StandardOpenOption.READ);
            FileChannel outChannel = FileChannel.open(outPath, StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW);
            MappedByteBuffer inBuffer = inChannel.map(FileChannel.MapMode.READ_ONLY, 0, inChannel.size());
            // outBuffer 的 size 设置可能有大小限制，因为使用 inChannel.size() 会出错: OutOfMemoryError: Map failed
            MappedByteBuffer outBuffer = outChannel.map(FileChannel.MapMode.READ_WRITE, 0, inChannel.size());
            byte[] dst = new byte[inBuffer.limit()];
            inBuffer.get(dst);
            outBuffer.put(dst);
      通道之间的数据传输
        transferFrom()
        transferTo()        
        // 两个方法使用一个即可
        inChannel.transferTo(0, inChannel.size(), outChannel);
        outChannel.transferFrom(inChannel, 0, inChannel.size());
      分散(Scatter)与聚集(Gather)
        分散读取 - Scattering Reads 将通道中的数据分散到多个缓冲区中，依次将缓冲区填满
        聚集写入 - Gathering Writes 将多个缓冲区的数据聚集到通道中，按照读取到缓冲区的顺序写入到通道
      字符集 - Charset
        编码 : 字符串转为字节数组的过程
        解码 : 字节数组转为字符串的过程
        SortedMap<String, Charset> charsets = Charset.availableCharsets();      // 所有的可用字符集
        Charset gbk = Charset.forName("gbk");           // 获得指定的字符集
        CharsetEncoder gbkEncoder = gbk.newEncoder();   // 获得对应的编码器
        CharsetDecoder gbkDecoder = gbk.newDecoder();   // 获得对应的解码器
        gbkEncoder.encode(CharBuffer);                  // 编码
        gbk.encode(String);                             // 编码
        gbkDecoder.decode(ByteBuffer);                  // 解码
        gbk.decode(ByteBuffer);                         // 解码
4 文件通道
5 NIO 的非阻塞式网络通信
6 管道 - Pipe
7 NIO2


问题
1.
    FileChannel inChannel = FileChannel.open(inPath, StandardOpenOption.READ);
    FileChannel outChannel = FileChannel.open(outPath, StandardOpenOption.WRITE, StandardOpenOption.READ, StandardOpenOption.CREATE_NEW);
    MappedByteBuffer inBuffer = inChannel.map(FileChannel.MapMode.READ_ONLY, 0, inChannel.size());
    // outBuffer 使用 inChannel.size() 出现错误 ：OutOfMemoryError: Map failed
    /**
    * API中显示，size大小不要超过 Integer.MAX_VALUE(0x7fffffff/2147483647)
    * 但是实测发现，size大小是 1111244363 ，出现了错误
    */
    MappedByteBuffer outBuffer = outChannel.map(FileChannel.MapMode.READ_WRITE, 0, inChannel.size());
    
    // 这里使用 inBuffer.limit() 也会提示 堆内存超出
    byte[] dst = new byte[inBuffer.limit()];
    
2. 
    // 字符集
    Charset gbk = Charset.forName("gbk");
    CharsetEncoder gbkEncoder = gbk.newEncoder();       // 编码器
    CharsetDecoder gbkDecoder = gbk.newDecoder();       // 解码器
    
    String s = "";
    CharBuffer charBuffer = CharBuffer.allocate(1024);  // 缓冲区
    charBuffer.put(s);
    charBuffer.flip();                                  // 切换模式
    ByteBuffer gbkEncode = gbkEncoder.encode(charBuffer);   // 编码
    
    CharBuffer decode2 = gbkDecoder.decode(gbkEncode);      // 使用相同字符集进行解码，可以正常输出
    // 不同字符集
    Charset utf = Charset.forName("utf-8");
    CharBuffer utf_decode1 = utf.decode(gbkEncode);         // 可以解码，出现乱码
    // 报错，java.nio.charset.MalformedInputException: Input length = 1
    CharsetDecoder utfDecoder = utf.newDecoder();
    CharBuffer utf_decode3 = utfDecoder.decode(gbkEncode);
    结果
        使用相同字符集可以正常解码；
        使用不同字符集时，直接用字符集解码，出现乱码；使用字符集的编码集进行解码，出现报错：java.nio.charset.MalformedInputException: Input length = 1