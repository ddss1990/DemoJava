/**
* JS DOM
* 学习时间 : 2018/11/23
* 视频时间 :2013/7/2
* 1.  在什么位置编写 JS 代码
* 2.  获取元素节点
* 3.  读写属性节点
* 4.  读写文本节点
* 5.  两个实验
* 6.  节点的属性(nodeType、nodeName、nodeValue)
* 7.  第一天复习
* 8.  创建并加入(元素节点、文本节点)节点
* 9.  替换节点及自定义的 replaceEach 方法
* 10. 删除节点
* 11. 添加删除节点的实验
* 12. 插入节点及自定义的 insertAfter 方法
* 13. innerHTML 属性
* 14. 第二天小结
* 15. 实验：Select 级联选择
* 16. 实验：Checkbox 全选
* 17. PPT 课件及源码
*/
0 DOM Document Object Model 文本对象模型
    DOM - 基于树的API
    DOM 树 - 节点(node)的层次
    节点 - 来源于网络理论，代表网络中的一个连接点
        <p title="test">Hello world</p>
        元素节点 p
        属性节点 元素节点的子节点，是元素的属性，可以直接通过属性的方式来操作 title="test"
        文本节点 元素节点的子节点，其内容为文本 Hello world
1 在什么位置编写 JS 代码
    1.1 一般，在body节点之前写JS代码，但是需要利用 window.onload 事件来保证代码在文档树加载完成后被触发，所以其中的代码可以获取到当前文档的任何节点
        <head>
            <title>I'm Title</title>
            <script type="text/javascript">
                // 1. 当整个HTML文档全部加载完成后会触发window.onload
                // 然后会执行后边的方法function
                window.onload = function (ev) {
                    // 2. 根据TAG去获得所有的button节点，并得到第一个button
                    var btn = document.getElementsByTagName("button")[0];
                    // 3. 为第一个button设置点击事件，点击后执行后边的function
                    btn.onclick = function () {
                        // 4. 弹出一个窗口，显示 Hello world
                        alert("Hello world!")
                    }
                }
            </script>
        </head>
    1.2 直接跟在会使用到方法的后边
        <button onclick="alert('Hello world')"> Way 2</button>
        缺点 - JS 和 HTML 强耦合，不利于代码的维护
               如果 onclick 对应的函数比较复杂，需要先定义一个函数，然后将对函数进行引用，比较麻烦
    1.3 不能在body节点之前来获取body内的节点，因为此时HTML文档树还没加载完成，获取不到指定的节点
    1.4 在整个HTML文档的最后 但是此方法不符合写JS代码的习惯 
2 获取元素节点
    2.1 获取指定ID的节点
        var node = document.getElementById("id");  // 得到的是节点, id值在一个HTML文档中须是唯一的
    2.2 根据 TAG 去获得节点集合
        var nodes = document.getElementsByTagName("tag");   // button, li 等，得到一个HTML文档内所有的TAG节点 得到是一个集合
      // getElementsByTagName - 所有的节点都有这个方法
          如果用 document 去调用方法，得到是HTML文档内所有的TAG集合
          如果用 节点 去调用方法，得到的是该节点的所有TAG子节点的集合
            var node = document.getElementById("id");
            var nodes = node.getElementsByTagName("tag");
    2.3 根据HTML文档内元素的 name 属性名去获取指定的节点集合
        var nodes = document.getElementsByName("name");
        // 如果HTML没有为元素定义name属性，则 getElementsByName 对IE无效，使用此方法须谨慎
        // 像 button 是有name属性的，而 li 则没有name属性
        // 实践显示，在IE新版本上的效果和Chrome是一样的，即时像li没有name属性，也是能获取的到的
3 读写属性节点
    属性节点 - 某一元素节点的属性
    通过 . 的方式去获取属性值和设置属性值
        1. 先获取元素节点
            var node = document.getElementById("id");
        2. 再读取属性的值
            var value = node.value;
        3. 可以手动设定属性的值
            node.value = "Hello";
    通过 getAttributeNode() 获得属性
        var attr = node.getAttributeNode("value");
        var value = attr.nodeValue;
        attr.nodeValue = "Hello"    // 通过此方法设置属性值在Chrome上未生效
4 读写文本节点
    元素节点的子节点
        1. 获得元素节点
            var nodeCity = document.getElementById("city");
        2. 获得所有的子节点
            var childNodesCity = nodeCity.childNodes;   // 此方法不常用，得到的应该是 < 到 < 之间的数量(需要有内容)
              例如
                <ul id="city">
                    <li id="bj" name="beijing">北京</li>
                    <li>上海</li>
                    <li>南京</li>
                    <li>杭州</li>
                </ul>    // 这样得到的 childNodes 是9个
                <ul id="city"><li id="bj" name="beijing">北京</li>
                    <li>上海</li>
                    <li>南京</li>
                    <li>杭州</li>
                </ul>   // 这样得到的 childNodes 就是8个了
        3. 获得元素节点的所有指定子节点
            var elementsLiCity = nodeCity.getElementsByTagName("li");
        4. 获得第一个子节点和最后一个子节点
            var firstChild = nodeCity.firstChild;
            var lastChild = nodeCity.lastChild;
    文本节点
        文本节点一定是元素节点的子节点
        1. 获得文本节点
          a. 如果文本节点有id的话，可以直接获得
            var nodeText = document.getElementById("text");
          b. 如果文本节点没有id，其父节点有id，使用父节点获得
            var element = document.getElementById("parent");
            var elementChild = element.getElementsByTagName("tag");
            var nodeText = elementChild.firstChild;
        2. 得到文本节点的值
            var value = nodeText.nodeValue;
        3. 可直接修改文本节点的值
            nodeText.nodeValue = "Hello";
5 两个实验
    1. 点击li，弹出其文本的值
        var elementsLi = document.getElementsByTagName("li");       // 获取所有的li节点
        for (var i = 0; i < elementsLi.length; i++) {               // 为每一个li节点设置点击事件
            elementsLi[i].onclick = function () {
                // 这里要使用this, 如果使用 elementsLi[i] 的话是得不到数据的
                // 因为当触发点击事件的时候 i = elementsLi.length , 指向的是空节点，故无法读取到数据
                alert(this.firstChild.nodeValue)                    // 弹出其文本的值
            }
            // 设置点击事件的方法也可以写为
            elementsLi[i].onclick = click;                          // 不能加括号
            function click() = {
                alert();
            }
        }
    2. 点击li节点， 若该节点的值是'^^'开头，就去掉；不是就加上
        难点
            判断是否'^^'开头
                var reg = /^\^{2}/g;            // 正则表达式 以'^^'开头
            去除
                str.replace(reg, "");
6 节点的属性(nodeType、nodeName、nodeValue)
    任何节点都有这三个属性
        nodeType 
            1 - 元素节点   元素节点没有属性值(nodeValue)
            2 - 属性节点
            3 - 文本节点   对应的 nodeName=#text
        nodeName
            对应节点的名字
        nodeType, nodeName 是只读的, nodeValue 是可以改变的
7 第一天复习
name:
<input type="text" name="submit_content" id="submit_text" value="Hello world">
    var submit = document.getElementById("submit_text");
    name = submit_content, value = Hello world, id = submit_text, type = text
    nodeName = INPUT, nodeValue = null, nodeType = 1
8 创建并加入(元素节点、文本节点)节点
    创建一个元素节点
        createElement() - 按照给定的标签名创建一个新的元素节点
            参数 - 只有1个，是被创建的元素节点的名字，是一个字符串
            返回值 - 是一个指向元素节点的引用指针
                nodeType 为 1
            新创建的元素节点不会添加到文档里，而是存在于JS中作为上下文对象
    创建一个文本节点
        createTextNode() - 创建一个包含文本的文本节点
            返回值 - 是一个指向新建文本节点的引用指针
                nodeType 为 3
            参数 - 只有一个，为新建文本节点包含的文本字符串
    为元素节点添加子节点
        appendChild()
            element.appendChild(node);
            参数 - 要添加的子节点
            调用者 - 元素节点
            返回值 - 是一个指向新增子节点的引用指针
        默认是将子节点添加到元素节点的最后
    # demo1 为<ul>新增一个带文本节点的<li>
        var nodeLi = document.createElement("li");              // 创建元素节点
        var nodeText = document.createTextNode("广州");         // 创建文本节点
        nodeLi.appendChild(nodeText);                           // 将文本节点添加到元素节点中
        var nodeCity = document.getElementById("city");         // 获得<ul>节点
        nodeCity.appendChild(nodeLi);                           // 将上边整合好的<li>节点加入到<ul>中
    # demo2 点击 submit 按钮时,　检查是否选择 type, 若没有选择给出提示: "请选择类型"; 
    #           检查文本框中是否有输入(可以去除前后空格), 若没有输入,则给出提示: "请输入内容";
    知识点
        单选框的判断
            <radio> 有一个属性 checked="checked" 代表被选中, 这里的 "checked" 可以是任意内容，例如"abc", "false", "true" 都代表被选中
            通过 if(元素节点.属性名) 来判断是否有该属性，例如 if(radio.checked) | if(node.id)
        去前后空格
            需要使用正则
            var reg = /^\s*|\s*$/g;
            var newValue = value.replace(reg, "" )
        <form action="js-dom-6.html">
            提交 : <input type="submit" value="Submit" id="submit"/>
            如果想要避免挑战，使用 return false; 进行打断
9 替换节点及自定义的 replaceEach 方法
    replaceChild() - 将给定父元素里的一个子节点替换成另外一个子节点
        var reference = element.replaceChild(newChild, oldChild);
            返回值 - 是一个指向已被替换的那个子节点的引用指针
            会有一个移动的功能，如果新子节点存在于别的节点下，使用此方法后，会将原处的子节点移动到现在的父元素节点下
    互换
        element1 -> node1; element2 -> node2    ==>    element1 -> node2, element2 -> node1;
        var nodeClone = node1.cloneNode(boolean)    // 克隆一个子节点
            true - 可以克隆子节点
        element2.replaceChild(nodeClone, node2);    // 先将替换element2中的
        element1.replaceChild(node2, node1);
    replaceEach(node1, node2)  自定义的方法，用于互换两个节点
        var element1 = node1.parentNode;            // parentNode 是其父节点
        var element2 = node2.parentNode;
        if (element1 && element2) {                 // 需要保证父节点存在
            var nodeClone = node1.cloneNode(true);  // 克隆一个子节点
            element2.replaceChild(nodeClone, node2);
            element1.replaceChild(node2, node1);
        }
    保存for循环中的i值
        var elements_li = document.getElementsByTagName("li");
        for(int i = 0; i < elements_li.length; i++) {
            elements_li[i].index = i;               // 通过index来保存i的值
            elements_li[i].onclick = function () {
                var index = this.index;             // 获得保存的index的值
            }
10 删除节点
11 添加删除节点的实验
12 插入节点及自定义的 insertAfter 方法
13 innerHTML 属性
14 第二天小结
15 实验：Select 级联选择
16 实验：Checkbox 全选