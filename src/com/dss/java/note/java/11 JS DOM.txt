/**
* JS DOM
* 学习时间 : 2018/11/23
* 视频时间 :2013/7/2
* 1.  在什么位置编写 JS 代码
* 2.  获取元素节点
* 3.  读写属性节点
* 4.  读写文本节点
* 5.  两个实验
* 6.  节点的属性(nodeType、nodeName、nodeValue)
* 7.  第一天复习
* 8.  创建并加入(元素节点、文本节点)节点
* 9.  替换节点及自定义的 replaceEach 方法
* 10. 删除节点
* 11. 添加删除节点的实验
* 12. 插入节点及自定义的 insertAfter 方法
* 13. innerHTML 属性
* 14. 第二天小结
* 15. 实验：Select 级联选择
* 16. 实验：Checkbox 全选
* 17. PPT 课件及源码
*/
0 DOM Document Object Model 文本对象模型
    DOM - 基于树的API
    DOM 树 - 节点(node)的层次
    节点 - 来源于网络理论，代表网络中的一个连接点
        <p title="test">Hello world</p>
        元素节点 p
        属性节点 元素节点的子节点，是元素的属性，可以直接通过属性的方式来操作 title="test"
        文本节点 元素节点的子节点，其内容为文本 Hello world
1 在什么位置编写 JS 代码
    1.1 一般，在body节点之前写JS代码，但是需要利用 window.onload 事件来保证代码在文档树加载完成后被触发，所以其中的代码可以获取到当前文档的任何节点
        <head>
            <title>I'm Title</title>
            <script type="text/javascript">
                // 1. 当整个HTML文档全部加载完成后会触发window.onload
                // 然后会执行后边的方法function
                window.onload = function (ev) {
                    // 2. 根据TAG去获得所有的button节点，并得到第一个button
                    var btn = document.getElementsByTagName("button")[0];
                    // 3. 为第一个button设置点击事件，点击后执行后边的function
                    btn.onclick = function () {
                        // 4. 弹出一个窗口，显示 Hello world
                        alert("Hello world!")
                    }
                }
            </script>
        </head>
    1.2 直接跟在会使用到方法的后边
        <button onclick="alert('Hello world')"> Way 2</button>
        缺点 - JS 和 HTML 强耦合，不利于代码的维护
               如果 onclick 对应的函数比较复杂，需要先定义一个函数，然后将对函数进行引用，比较麻烦
    1.3 不能在body节点之前来获取body内的节点，因为此时HTML文档树还没加载完成，获取不到指定的节点
    1.4 在整个HTML文档的最后 但是此方法不符合写JS代码的习惯 
2 获取元素节点
    2.1 获取指定ID的节点
        var node = document.getElementById("id");  // 得到的是节点, id值在一个HTML文档中须是唯一的
    2.2 根据 TAG 去获得节点集合
        var nodes = document.getElementsByTagName("tag");   // button, li 等，得到一个HTML文档内所有的TAG节点 得到是一个集合
      // getElementsByTagName - 所有的节点都有这个方法
          如果用 document 去调用方法，得到是HTML文档内所有的TAG集合
          如果用 节点 去调用方法，得到的是该节点的所有TAG子节点的集合
            var node = document.getElementById("id");
            var nodes = node.getElementsByTagName("tag");
    2.3 根据HTML文档内元素的 name 属性名去获取指定的节点集合
        var nodes = document.getElementsByName("name");
        // 如果HTML没有为元素定义name属性，则 getElementsByName 对IE无效，使用此方法须谨慎
        // 像 button 是有name属性的，而 li 则没有name属性
        // 实践显示，在IE新版本上的效果和Chrome是一样的，即时像li没有name属性，也是能获取的到的
3 读写属性节点
4 读写文本节点
5 两个实验
6 节点的属性(nodeType、nodeName、nodeValue)
7 第一天复习
8 创建并加入(元素节点、文本节点)节点
9 替换节点及自定义的 replaceEach 方法
10 删除节点
11 添加删除节点的实验
12 插入节点及自定义的 insertAfter 方法
13 innerHTML 属性
14 第二天小结
15 实验：Select 级联选择
16 实验：Checkbox 全选