1 Oracle的安装和配置
    数据库名 - orcl(默认)，设置密码，此密码对应的用户名是system
    关系型数据库
    网络上的数据库 - 在网络上供多用户连接数据库
    由 Oracle数据库 和 Oracle实例 构成
        Oracle数据库
        Oracle实例    -  来管理Oracle数据库，一个实例只能与一个数据库关联，一个数据库可由多个实例连接
    将SCOTT用户取消锁定，设置密码，用于后续的操作
    需要开启的服务
        OracleServiceORCL
        OracleOraDB_TNSListener
    
    客户端
      安装类型 - 管理员
      配置
        服务名 - orcl
        网络协议 - TCP
        主机名 - IP地址，端口号 - 1521(default)
      使用
        SQL Plus
        select sysdate from dual;   # 返回当前系统的系统时间
2 数据库管理
    PLSQL-Developer
      Command Window
        @PATH;  # 导入SQL语句    顺序  del_data  ->  hr_cre  ->  hr_popul
            导入的SQL语句，创建的表只在当前用户下存在，如果想要其它用户能访问，需要在其它用户的对象中为指定的表添加要操作的权限
    Enterprise Manager Console  -  企业管理器
      安全性
        用户 - 提供的默认用户，可新建用户
            系统 - CREATE ANY TABLE  # 建表权限
            对象 - 管理表的操作权限
            限额 - 开辟表空间，用于存储表
            角色 - 对系统和对象的权限的封装，这里面是已配置好的一些操作权限，例如 DBA。配置了角色后，需要重新连接才能生效.
        角色 - 所有的对系统和对象的权限的封装的角色
        概要文件 - 设置一些基本属性，例如多次输入密码错误，锁定帐号
3 SQL
    基础
        Orcale严格区分大小写，MySQL不区分
        注释    --
        连接符  ||
        别名用双引号表示
        char - 定长字符串    varchar2 - 可变字符串
    单行函数
      字符控制函数
        lower('')      -    转小写
        upper('')      -    转大写
        initcap('')    -    首字母大写，其余小写
        concat(), substr(), length(), instr('', '')
        lpad(p1,p2,p3) -    长度为p2，不够的用p3左补全，rpad() - 右补全
        trim(a from s) -    去掉首尾两端的指定字符
        replace()      -    替换所有的指定字符
      数字函数
        round(a, b)    -    四舍五入，b代表精度，小数点后b位；如果是负数，代表是小数点钱b位
        trunc(a, b)    -    截断，b代表位数，如果是负数，就变为0
        mod(a, b)      -    取余
      日期函数
        sysdate        -    当前日期
        months_between -    两个日期相差的月份数
        add_months()   -    日期加上指定月
        next_day()     -    指定日期的下一个星期几对应的日期
        last_day()     -    本月的最后一天
      转换函数
        yyyy - 年  mm - 月  dd - 天
        to_char()      -    转成字符型
        to_date()      -    转成日期型
        to_char(1234, '$999,999.99')   -   转成指定格式的字符，后边代表3位作为一个整体，如果9换成0，如果前边的数不够3位，用0来补
                                           $ - 美元    L - 本地货币符号    . - 小数点    , - 千位符
        to_number      -    字符转成数字
      通用函数 - 适用于任何数据类型，包括空值
        nvl(1, 2)      -    将空值转成一个已知的值
        nvl(1, 2, 3)   -    1不为空，返回2；为空，返回3
        nullif(1, 2)   -    相等返回null，不等返回1
        coalesce()     -    如果第一个参数为空，返回第二个；如果第二个为空，返回第三个；依次类推
      条件表达式
        case
            case 变量 when 条件1 then 返回1
              when 条件2 then 返回2
              else 默认值
            end
        decode
            decode(变量, 条件1, 值1, 条件2, 值2, ... , 默认值)
    多表查询
      SQL92
        内连接
          等值连接，非等值连接
        外连接
          左外连接  select * from A a, B b where a.XXX = b.XXX(+);
          右外连接  select * from A a, B b where a.XXX(+) = b.XXX;
      SQL99
        natural join     -    两个表连接，并将两个表中所有列名相同的列进行连接
        A join B using(列)    -    用指定的列进行连接，前提是两个表中的列名一致
        A a join B b on a.XXX = b.XXX;
        左外连接    left outer join
        右外连接    right outer join
        满外连接    full outer join
    分组函数
      组函数
        avg, count, max, min, sum
        stddev      -     标准偏差，用作聚集和分组函数
    子查询
      单行子查询
      多行子查询
    创建和管理表
      select * from user_tables;        # 查看用户创建的表
      create table NAME();              # 建表
      create table NAME as select XXXX; # 建表
      alter table TABLE
              add ()                    # 增加列
              modify ()                 # 修改列，改的是数据类型。有数据的列不能修改，需要先置空才行
              drop column NAME          # 删除列
              rename column NAME TO NAME # 重命名列
      drop table NAME;                  # 删除表
      truncate table NAME;              # 清空表数据，不支持回滚
      delete from NAME;                 # 清空数据，支持回滚
      rename NAME to NAME;              # 改名
      insert into () values()           # 插入数据
      insert into () select from XXX    # 插入数据
      update NAME set XXX               # 修改数据
      delete from NAME where XXX        # 删除数据
      事务
        savepoint NAME;                 # 创建回滚点
        rollback to savepoint NAME;     # 回滚到指定点
        其它用户不能看到当前用户所做的改变，直到当前用户结束事务。
        DML语句所涉及到的行被锁定，其它用户不能操作。
        锁释放后，其它用户才能进行操作。
    约束
        [constraint NAME] 
            not null       # 非空
            unique         # 唯一，空值不算唯一
            primary key    # 主键，非空且唯一
            check          # 检查，后边直接跟条件 check(条件)
            default        # 默认
          NAME - 表名_列名_概述，见名知意
      或 表级约束
        constraint NAME 约束(列)
              constraint NAME foreign key(列) references TAB(列)[XXX];   # 外键比较特殊，只能用表级约束，且多个 references 字段
                 XXX - on delete cascade   级联删除，父表中的列删除时，子表中相应的整条数据也被删除
                       on delete set null  级联置空，父表中的列删除时，字表中相应的列置空
      修改约束   -   只能添加或删除约束，不能修改
        alter table NAME 
                modify(列 类型 约束)             # 添加一个约束；如果不加约束的话，是否能删除约束，待验证
                add constraint 约束名 约束(列)   # 添加一个约束
                drop constraint 约束名           # 删除一个约束
                disable constraint 约束名        # 无效化一个约束
                enable constraint 约束名         # 使约束有效，前提是表内的数据不冲突
                drop primary key;                # 删除主键约束，待验证
      查询表中定义的约束
        select constraint_name, constraint_type, search_condition from user_constraints where table_name='表名';
      查询约束定义的列
        select constraint_name, column_name from user_cons_columns where table_name='表名';
    视图  -  一个虚表，对应的原表叫基表。
        修改视图，原表的数据会随之改变
        create view NAME as select XXX;          # 创建一个视图
        create or replace view NAME as select XXX;  # 修改一个视图
        [with read only]                         # 只读
            create [or replace] view NAME as select XXX with read only;
        drop view NAME;                          # 删除一个视图
        简单视图 - 一个表，没有函数，没有分组，可以DML操作
        复杂视图 - 多个表，有函数，有分组，有时可以DML操作
        TOP - N 分析  -  查询一个列中最大或最小的N个值
            伪列 - 类似于Excel中的行号，在Orcale中的字段是 rownum
            rownum 只能使用 < 或 <= ;不能使用 =, >, >=,不然返回的数据为空
              如果想要使其能使用>等操作，需要先将rownum变为真实的列，需要用到子查询
                  select rn from (select rownum rn, XXX from TABLE where XXX) where rn>10 and rn<=20;
    其它数据库对象
        序列  Sequences  供多个用户来产生唯一数值的数据库对象
              主要用于提供主键值
              序列值存入内存可以提高访问效率
            create sequence NAME                 # 创建一个序列
                   [increment by n]              # 每次增长的数值
                   [start with n]                # 从哪个值开始
                   [maxvalue n]                  # 最大值
                   [minvalue n]                  # 最小值
                   [cycle/nocycle]               # 是否需要循环
                   [cache n / nocache]           # 是否缓存登录
            select NAME.currval from dual;       # 查看当前值
            select NAME.nextval from dual;       # 查看下一个值
            alter sequence NAME XXX;             # 修改一个序列，初始值的修改只能通过删除再创建的方式才能修改
            裂缝出现的情况  -  出现了断值
                回滚
                系统异常
                多个表同时使用同一序列
            select sequence_name, min_value, max_value, increment_by, last_number from user_sequences;
                                                 # 查询现有的序列，如果指定NOCACHE, last_number 显示序列中下一个有效的值
            drop sequence NAME                   # 删除一个序列
        索引
            索引被损坏，不影响表，只会影响查询的速度
            通过指针加速Orcale服务器的查询速度，减少磁盘IO
            自动创建
                primary key, unique约束，会自动在相应的列上创建唯一的索引
            手动创建
                create index NAME on 表(列)       # 创建索引
    控制用户权限
        数据库安全性
            系统安全性
            数据安全性
        系统权限 - 对于数据库的权限
        对象权限 - 操作数据库对象的权限 
      命令行操作
        create user NAME identified by PWD;       # 创建一个用户
        grant privilege to user                   # 赋予权限
            privilege : 
                create session                    # 创建会话
                create table                      # 创建表
                create sequence                   # 创建序列
                create view                       # 创建视图
                create procedure                  # 创建过程
        alter user NAME quota unlimited on TAB;   # 创建用户表空间，只有拥有表空间的情况下，表才能创建成功
        alter user NAME quota SIZE on TAB;        # 创建用户表空间，给点限额大小
        alter user NAME identified by PWD;        # 改密码
        create role NAME;                         # 创建一个角色
        grant privilege to NAME;                  # 将权限赋予给角色，可以是多个权限并列
        grant NAME1 to NAME2;                     # 将角色赋予给用户，NAME1 - 角色名  NAME2 - 用户名
      对象 - 指的是表，视图，索引这些东西
        不同的对象具有不同的对象权限
        对象的拥有者拥有所有的权限
        对象的拥有者可以向外分配权限
        grant [select/update/...] on TAB to USER; # 为对象分配权限，也可以指定列，用 表名.列名
        grant [select/...] on TAB to USER with grant option;
                                                  # 使用户同样具有分配权限的权利
        grant [select/...] on TAB to public;      # 将表的权限给所有用户
        revoke privilege on TAB from USER         # 收回对象权限
        select * from                             # 查询权限分配情况
                ROLS_SYS_PRIVS          # 角色拥有的系统权限
                ROLS_TAB_PRIVS          # 角色拥有的对象权限
                USER_ROLS_PRIVS         # 用户拥有的角色
                USER_TAB_PRIVS_MADE     # 用户分配的关于表对象的权限
                USER_TAB_PRIVS_RECD     # 用户拥有的关于表对象权限
                USER_COL_PRIVS_MADE     # 用户分配的关于列对象的权限
                USER_COL_PRIVS_RECD     # 用户拥有的关于列对象的权限
                USER_SYS_PRIVS          # 用户拥有的系统权限
      总结
        create user     # 创建用户
        grant           # 分配权限
        create role     # 创建角色
        alter user      # 修改密码
        revoke          # 收回权限
    SET运算符 - 
        union/union all                 # 并集
        intersect                       # 交集
        minus                           # 差集，A中独有的元素
        除了 union all 之外，结果默认按第一列从小到大的顺序排列
        column NAME noprint;            # 声明一个列，并且不输出，可用到列的别名上
    高级子查询
        多列子查询 - 子查询返回多个列
        from子句中使用子查询
        单列子查询 - 子查询返回一个列
            Orcale8使用限制
                select语句(from和where子句)
                insert语句中的values列表中
            Orcale9i使用限制
                decode和case
                select中除 group by 子句以外的所有子句中
        相关子查询 - 一行接一行的顺序执行，主查询的每一行都执行一次子查询
        Exists操作符 - 检查在子查询中是否存在满足条件的行
        相关更新 - 用子查询更新或删除数据
        WITH子句
            可以避免在select语句中重复书写相同的语句块
            WITH子句将该子句中的语句执行一次并存储到用户的临时表空间中
            使用WITH子句可以提高查询效率
            with NAME as SQL;           # SQL语句的结果是一个定值，可以是一个值，也可以是一个表
            select XXX from TAB where NAME;      # 再用到上边用with定义的NAME
4 PL/SQL  -  Procedure Language & Structured Query Language
    是对SQL语言存储过程语言的扩展
    由3个块组成，声明部分、执行部分、异常处理部分
        declare XXX          # 声明部分，声明变量，类型及游标，以及局部的存储过程和函数
        begin   XXX          # 执行部分，过程及SQL语句
        exception  XXX       # 异常处理部分  
        end;
     set serveroutput on;          # 使用PL-SQL的必须操作
     一个简单的PL-SQL
         begin                     # declare 和 exception 如果没有内容可以省略
            dbms_output.put_line('Hello world');    # 输出一行内容
         end;
     声明部分
        NAME 类型;           # 变量，可以直接指定类型，也可以动态的获取表中列的类型(TAB.COL%type)
        V_name          # 变量 
        C_name          # 常量
        E_name          # 异常
        name_cursor     # 游标
        name_record     # 记录类型 
        v_sal number(8,2) := 0;         # 定义一个变量，并给默认值
    记录类型 - 把逻辑相关的数据作为一个单元存储起来，称作PL/SQL RECORD的域(FIELD)，作用是存放不同但逻辑相关的信息。类似于JAVA中的类。 
        declare              # 声明一个记录类型
            type test_record is record(
                v_name varchar2(20),
                v_age number(3)
            );
            v_test_record test_record;     # 定义一个记录类型的成员变量，类似于JAVA中的创建对象
            v_emp_record employees%rowtype;      # 不手动定义记录类型，直接让其等于employees表中的所有列。这样其中的变量名就等于列名
        begin
            v_test_record.v_name := 'Tom';
            v_test_record.v_age := 18;
            dbms_output.put_line('name:'||v_test_record.v_name || ' age:'||v_test_record.v_age);    
    流程控制
        条件语句
            if 条件 then 语句 [elsif 条件 then 语句 else 语句] end if;
            case 变量 when 条件1 then 返回1 when 条件2 then 返回2 [else 返回n] end;
        循环语句
            loop ... exit when; ... end loop;
            while ... loop ... end loop;
            for i in [reverse] 下限 .. 上限 loop ... end loop;          # reverse代表反着来
        goto, exit
            <<label>>  # 定义一个label     goto label    # 跳到laebl标签处
    游标的使用 - 类似于Iterator
        处理多行记录的事务经常使用游标来实现
        游标是一个指向上下文的句柄或指针
        显式游标
            1. 定义游标
                cursor v_cursor is XXX;
            2. 打开游标
                open v_cursor;
            3. 提取游标数据
                fetch v_cursor into v_name;    # v_name 是定义的一个变量
                while v_cursor%found loop      # 判断游标内是否还有值，有的话进行循环
            4. 关闭游标
                close v_cursor; 
            游标属性
                %found                           # 布尔类型，当最近一次读记录时成功返回，则为true
            游标的for循环 - 可以取代上边的三步，定义游标不能省
                for v_name in v_cursor loop
                    XXX;
                end loop;
        隐式游标
    异常的处理
        预定义错误 - 大约有24个，无需在程序中定义，Orcale自动引发
        非预定义错误 - 需要用户在程序中定义，Orcale自动引发
        用户定义错误 - 需要用户在程序中定义，然后显式地在程序中将其引发
        语法
            exception 
              when 类型 then 
              when 类型 then
              when others then 
        类型
            No_data_found                        # 没有找到数据
            Too_many_rows                        # 返回多行
        非预定义错误
            e_exception exception;               # 定义错误
            pragma exception_init(e_exception, NUM)   # e_exception是上边定义的错误，NUM是实际出现的错误编码
        用户定义错误
            e_exception exception;               # 定义错误
            raise e_exception;                   # 引发错误
    存储函数、存储过程
        Orcale提供可以把PL/SQL程序存储在数据库中，并可以在任何地方来运行它，这样就叫存储过程或函数。
        区别：
            存储函数总向调用者返回数据
            存储过程不返回数据
        存储函数
            create [or replace] function NAME(参数1 类型1, 参数2 类型2) return 返回类型
            is/as
                函数使用过程中，需要声明的变量、记录类型、游标
            begin 
                函数体
                return XXX;    # 返回一个值，对应于返回类型
            exception
            end
            select NAME() from dual;               # 调用函数
            参数类型
                参数 [in/out/in out] 类型
                in - 默认，表示传递给函数的值在函数执行过程中不改变
                out - 表示该值在函数中进行计算并通过该参数传递给调用语句
                in out - 表示传递给函数的值可以变化并传递给调用语句
        存储过程
            create [or replace] procedure NAME(参数1 类型1, 参数2 类型2)
            is
                声明变量
            begin
                存储过程体
            exception
            end;
    触发器
        类似过程和函数，都有声明，执行和异常处理过程的PL/SQL块
        触发器在数据库里以独立的对象存储，与存储过程的区别：存储过程通过其它程序来启动运行或直接启动运行；触发器是由一个事件来启动运行。触发器是当某个事件发生时自动地隐式的运行。
        触发器不能接收参数，运行触发器的过程叫触发或点火。
        Orcale事件指的是对数据库的表进行的 insert, update, delete 操作或对视图进行类似的操作。
        DML触发器
            Oracle可以在DML操作前或操作后进行触发，并且可以对每个行或语句操作上进行触发。
        组成
            触发事件 - 因为什么导致触发器发生
            触发时间 - 是在触发事件发生之前还是之后
            触发器本身 - 该触发器的目的和意图
            触发频率 - 触发器内定义的动作被执行的次数。语句级触发器(statement)和行级触发器(row)
                statement - 当某触发器发生时，该触发器只执行一次
                row - 当触发器反生时，对收到该操作影响的每一行数据，触发器都单独执行一次
        创建触发器
            create [or replace] trigger NAME 
            before/after
                insert/delete/update on TAB
            [for each row]
            [when 条件]
                触发器主体
        show triggers;                           # 查看创建的触发器
        drop trigger NAME;                       # 删除触发器
        
    
        
                

            
            
            
            
            
常见的数据库对象
     表     基本的数据存储集合，由行和列组成
    视图    从表中抽出的逻辑上相关的数据集合
    序列    提供有规律的数值
    索引    提高查询的效率
   同义词   给对象起别名
            
    
    
    