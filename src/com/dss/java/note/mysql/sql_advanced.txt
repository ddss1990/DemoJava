高级MySql
1 架构介绍
  1.1 Linux下安装
    Community Server  GA版
    1.1.1 检查是否有安装过
        rpm -qa | grep -i mysql
            如果安装过，会显示 MySQL-XXXXXXX
    1.1.2 安装服务端
        rpm -ivh MySQL-server-xxxxxx.rpm
           i - install
           v - verbose
        装完之后，有用户root，但没密码，需要手动设置
        mysqladmin -u root password 'new-password'
        mysqladmin -u root -h cloud password 'new-password'
    1.1.3 安装客户端
        rpm -ivh MySQL-client-xxxxxx.rpm
    1.1.4 验证是否安装成功
        ps -ef | grep mysql   # 这中的 datadir 字段指向的目录是存放数据库的目录
    1.1.5 启动MySQL
        service start mysql
        systemctl start mysql
        chkconfig mysql on # 设置开机自启动   
        chkconfig --list | grep mysql 
        ntsysv # 查看有哪些软件自启动，可修改
    1.1.6 root帐号
        mysqladmin -u root password '123'  # 设置密码
    1.1.7 配置文件
        路径  /usr/share/mysql
        my-huge.cnf   ->   /etc/my.cnf
            client
                default-character-set=utf8   # add  默认的字符集
            mysqld
                sort_buffer_size=2M         # 排序的默认缓冲池大小
                character_set_server=utf8
                character_set_client=utf8
                collation-server=utf8_general_ci
            mysql  
                default-character-set=utf8
            修改字符集前建的库在字符集修改之后字符集不会发生变化。修改之后建的库编码才有效。
        log-bin     # 二进制日志，用于主从复制
        log-error   # 错误日志，默认关闭，记录服务器的启动和错误日志
        log         # 查询日志，默认关闭
        数据库/frm文件   # 存放表结构
        数据库/myd文件   # 存放表数据
        数据库/myi文件   # 存放表索引
    1.1.8 逻辑架构
        插件式的存储引擎架构将查询处理和其它系统任务以及数据的存储提取相分离。
        连接层
        服务层 ： 核心服务功能。服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化，最后生成相应的执行操作。
        引擎层 ： 存储引擎真正的负责了MySQL中的数据的存储和提取。
        存储层
    1.1.9 存储引擎
                MyISAM          InnoDB
        外键    不支持           支持
        事务    不支持           支持
        行表锁  表锁，即使操作一条记录，也会锁住整个表，不适合高并发操作
                                 行锁，只锁住一行，对其它行无影响，适合高并发操作
        缓存    不缓存真实数据   缓存真实数据
        表空间  小               大
        关注点  性能             事务
    在centos7上，mysql变成了mariadb，安装变成 yum -y install mariadb* , 设置管理员密码 mysql_secure_installation ,  设置开机自启动 systemctl enable mariadb
2 索引优化
    先复现，
    2.0 索引
        未建索引前查询速度较慢，因为是杂乱无序的；创建索引后，会对其进行排序，提升查询速度。
        为频繁使用的字段创建索引，有助于提升查询速率。
        单值索引  -  
            create index 索引名 on 表名(列名);    索引名命名规范: idx_表名_列名
        复合索引  -  
            create index 索引名 on 表名(列1,列2);    索引名命名规范: idx_表名_列1列2    
    2.1 性能下降
        现象 - 执行时间长，等待时间长
        原因 - 查询语句写的不好；索引失效；关联查询太多(设计缺陷或不得已的需求)；服务器调优及各参数的配置(缓冲、线程数等)
           索引失效 - 创建了索引没用上
    2.2 通用的Join查询
        2.2.1 SQL顺序
            select distinct * from 表 join 表 on 连接条件 where 查询条件 group by 分组条件 having 筛选条件 order by 排序 limit 分页
        2.2.2 机器执行顺序
            from -> on -> join -> where -> group by -> having -> select -> distinct -> order by -> limit
        2.2.3 多种join
            内连接 - inner join
            外连接 - 左外(left join), 右外(right join)，全外(full outer join) // MySql不支持全外，可用 union 来实现功能
    2.3 索引 - Index
        2.3.1 索引是什么                                         BTree
            帮助MySql高效获取数据的数据结构。 本质 - 索引是数据结构。
            排好序的快速查找数据结构。
                在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据，这样就可以在这些数据结构上实现高级查找算法。
            会影响到排序和查找。
            查找快，更新慢
                更新 - 不只是更新数据，也会更新对应的索引。
            索引本身也很大，不能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。
            索引一般指的是B树(BTree，多路搜索树，不一定是二叉的)结构组织的索引。
                聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。还有其它索引如哈希索引等。
        2.3.2 优势劣势
            优势 - 提高数据检索效率，降低数据库的IO成本；对数据列进行排序，降低数据排序的成本，降低CPU的消耗
            劣势 - 索引也是一张表，保存了主键与索引字段，并指向实体表的记录，因此索引列也要占用空间；提高了查询速度，但是降低了更改速度；需要人为的研究设计索引。
        2.3.3 创建索引 
           单值索引 - 一个索引只包含单个列，一个表可以有多个单列索引。建议最多不超过5个索引。
           唯一索引 - 索引列的值必须唯一，但允许有空值。
           复合索引 - 一个索引包含多个列
           创建索引
               create [unique] index NAME on 表名(列名);
               alter 表名 add [unique] index [NAME] on 列名;
                 列名顺序是默认的检索顺序。
           删除索引
               drop index NAME on 表名;
           查看索引
               show index from 表名;
           索引名命名规范: idx_表名_列1列2    
           四种方式添加数据表的索引
               alter table 表名 add primary key 列名;       # 添加一个主键，意味着索引值必须是唯一的，并且不能为空
               alter table 表名 add unique 索引名 列名;     # 创建索引的值必须是唯一的(除了NULL，因为可能有多个)
               alter table 表名 add index 索引名 列名;      # 添加普通索引，索引值可出现多次
               alter table 表名 add fulltext 索引名 列名;   # 全文索引 
        2.3.4 索引结构
            BTree索引
            Hash索引
            full-text索引
            R-tree索引
            BTree 检索原理  - 有点类似于二分查找，二叉树
                段  区  块
              每个磁盘块包含几个数据项和指针                                                                    l1           A
              叶子节点 - 存储真实的数据                                                                         l2       B        C
              非叶子节点 - 不存真实的数据，只存指引搜索方向的数据项，这些数据项并不真正的存在于数据表中         l3     D   E     F  G
              
              三层的B+树可表示上百万的数据，如果上百万的数据查找只需要3次IO，性能的提升是巨大的。如果没有索引，就会每次查询都会执行一次IO，是非常慢的。
        2.3.5 创建索引
            适合创建
                主键自动建立唯一索引
                频繁作为查询条件的字段应创建索引
                查询中与其它表关联的字段，外键关系建立索引
                频繁更新的字段不适合创建索引
                where字段里用不到的字段不创建索引
                高并发下倾向创建组合索引
                插叙中排序的字段，排序字段若通过索引去访问将大大提高排序速度
                  创建索引的时候也要考虑是否有排序需求
                查询中统计或者分组字段
            不适合创建
                表记录太少
                经常增删改的表
                数据重复且分布均匀的表字段，应该只为最经常查询或经常排序的数据列建立索引。某个数据列包含许多重复的内容，为其建立索引没有太大的实际效果。例如一个班里学生的国籍都一样。
                  索引的选择性是指索引列中不同值的数目与表中记录数的比，这个值越接近于1，索引的效率越高。也就是作为索引的列如果每个值都不一样，效率是最高的。
    2.4 性能分析
        2.4.1 MySql Query Optimizer - MySql自带的查询优化器
            负责优化SELECT语句的优化器模块 - 通过计算分析系统中收到的统计信息，为客户端请求的Query提供他认为最优的执行计划。但是MySql认为最优的并不一定是DBA认为最优的。
        2.4.2 MySql常见瓶颈
            CPU - CPU的饱和一般发生在数据装入内存或从磁盘中读取数据的时候
            IO - 频繁IO导致装入数据远大于内存容量的时候
            服务器的性能瓶颈 - 配置不够
        2.4.3 Explain
          作用
            explain 可以模拟优化器执行SQL查询语句，从而知道MySql是如何处理你的SQL语句的。分析查询语句或表结构是否存在性能瓶颈。
          能干嘛
            表的读取顺序 - 通过id的值来确定
            数据读取操作的操作类型 - select_type
            哪些索引可能使用 - possible_keys
            哪些索引被实际使用 - key
            表之间的引用
            每张表有多少行被优化器查询 - rows
          使用
            explain sql语句;    # 执行计划包含的信息
              表头  id   select_type   table   type   possible_keys   key   key_len   ref   rows   Extra
                    
                    id - select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序。  只有多个表的情况下，id的值才为多个
                         id相同 - 执行顺序由上至下
                         id不同 - 如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行。
                         id相同又不同 - id值的先执行，值相同的顺序执行
                    select_type
                        SIMPLE - 简单的select查询，不包含子查询或UNION
                        PRIMARY - 查询中若包含任何复杂的子部分，最外层查询标记为PRIMARY
                        SUBQUERY - 在select或where列表中包含的子查询
                        DERIVED - 在from列表中的子查询被标记为DERIVED，MySql递归执行这些子查询，把结果放在临时表里
                        UNION - 若第二个select出现在UNION之后，就被标记为UNION
                        UNION RESULT - 从UNION表获取结果的select，union合并的结果集
                    table - 这一行的数据是来自于哪个表的
                    type - 访问类型
                        system > const > eq_ref > ref > range > index > ALL    查询要达到range级别，最好是ref
                        system - 表只有一条记录(等于系统表)
                        const - 表示通过索引一次就找到了，const用于比较 primary key 和 unique 索引。如将主键置于where列表中 where id = 4
                        eq_ref - 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。
                        ref - 非唯一性索引扫描，返回匹配某个单独值的所有行。  通过创建一个多列索引，查询的时候只使用多列中的某一列进行查询。
                        range - 只检索给定范围的行，使用一个索引来选择行。
                        index - Full Index scan. 只遍历索引树，比ALL快，因为索引文件比数据文件下。index是从索引中读取的，ALL是从磁盘中读取的。
                        ALL - Full Table Scan. 
                    possible_keys - 本条SQL语句可能用到的索引，但不一定被查询实际使用。
                    key - 实际用到的索引。 若使用了覆盖索引，则该索引仅出现在key列表中。 
                    key_len - 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。越短越好(在保证精度的前提下)
                              最大可能长度，并非实际长度。根据表定义而得到的。
                    ref - 显示索引的哪一列被使用了，可能的话是一个常数。哪些列或常量被用于查找索引列上的值。
                    rows - 根据表统计信息及索引使用情况，大致估算出找到所需记录所需要读取的行数。
                    Extra - 拓展，包含不适合在其它列中显示但十分重要的额外信息
                        Using filesort - 文件内排序 
                                          如使用了3列作为索引，但查询语句使用的时候，只用到了两列 where l1 = 1 order by l3 这个时候会出现 Using filesort 会影响到性能
                                          正确写法 where l1 = 1 order by l2, l3
                        Using temporary - 使用了临时表保存中间结果，MySql在对查询结果排序的时候使用临时表，常见于 order by 和 group by 
                                          如 where l1 in () group by l2
                                          正确写法  where l1 in () group by l1, l2
                          严重程度 Using temporary > Using filesort  如果出现这俩，一定要解决
                          如果建立索引， order by 和 group by 一定要按照索引个数和顺序来写
                        Using index - 表示使用了覆盖索引，避免访问了表的数据行，效率不错
                                      同时出现 Using where 表明 索引被用来执行索引键值的查找
                                      没有出现 Using where 表明 索引被用来读取数据而非执行查找动作
                            覆盖索引 - select 的数据列只用从索引中就能读取到，不必读取数据行。查询的列要被所建的索引覆盖
                                       索引 idx_tab_l1L2L3   ->   select l1, l2, l3 from tab 
                        Using where - 使用了where过滤
                        Using join buffer - 使用了连接缓存
                        impossible value - where子句的值总是false，无法获取数据
                        select tables optimized away - 在没有 group by 的情况下，对索引进行了优化
                        distinct - 优化distinct操作，在找到第一匹配的元组后即停止找同样的值的动作
                    id, type, key, rows, Extra 比较重要
        2.5 索引优化
          2.5.1 索引分析
            双表查询 - 有主外键的时候，索引加在
              左连接加在从表(右边)上的效果大于加在主表(左边)上的效果， 右链接的索引加在左边的表上。
              如果已经给定了索引是加在某个表上，这个时候可以通过交换主从表的位置来使效果最佳。
            三表 
              索引加在经常查询的字段上，也可以理解为连接字段上
              
            尽可能减少join语句中的NestedLoop的循环总次数，永远用小结果集驱动大的结果集。
            优先优化NestedLoop的内层循环。
            保证Join语句中被驱动表上Join条件字段已经被索引。
            当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要吝啬JoinBuffer的设置。
          2.5.2 索引失效
            a. 全值匹配我最爱 - 
            b. 最佳左前缀原则 - 查询从索引的最左前列开始并且不跳过索引中的列 (带头大哥不能死，中间兄弟不能丢)
            c. 不在索引列上做任何操作(计算、函数、(自动或手动)类型转换)，会导致索引失效而转向全表扫描  (索引列上少计算)
            d. 存储引擎不能使用索引中范围条件右边的列 (范围之后全失效) 如： where l1 = 3 and l2 > 2 and l3 = 4; -> 这种情况下只用到了l1,l2两个列，第三个列l3没用到
            e. 尽量使用覆盖引擎(只访问索引的查询(索引列和查询列一致))，减少 select * ()
            f. MySql在使用不等于(!= 或 <>)时，无法使用索引会导致全表扫描 ()
            g. is null, is not null 也无法使用索引 ()
            h. like以通配符开头('%abc')MySql索引失效会变成全表扫描 ()
                使用覆盖索引来解决一定要使用通配符开头的情况   select l1, l2, l3 from tab where l1 like '%abc%'
            i. 字符串不加单引号，索引失效 ()
            j. 少用or，用or连接会索引失效 ()
                    全值匹配我最爱，最左前缀要遵守。
                    带头大哥不能死，中间兄弟不能丢。
                    索引列上少计算，范围之后全失效。
                    LIKE百分写最右，覆盖索引不写星。
            
          案例
            索引 idx_tab_l1L2L3L4 tab(l1, l2, l3, l4)
            key_len情况:   1 -31,  2 - 62,   3 - 93,  4 - 124
            where 后的条件                                   分析情况
              l1 = 1 and l2 = 2 and l3 = 3 and l4 = 4          使用到了索引，4列都有使用到  
              l1 = 1 and l2 = 2 and l4 = 4 and l3 = 3          使用到了索引，4列都有使用到
              l4 = 4 and l4 = 3 and l2 = 2 and l1 = 1          使用到了索引，4列都有使用到
                     上面这3种分析情况一样，是因为Mysql Query Optimizer 做了自动优化 
              l1 = 1 and l2 = 2 and l3 > 3 and l4 = 4          使用到了索引，使用了3列  -  范围之后全失效
              l1 = 1 and l2 = 2 and l4 > 4 and l3 =3           使用到了索引，4列都有使用到
              l1 = 1 and l2 = 2 and l4 = 4 order by l3         使用到了索引，使用了3列，l1,l2 用于查找，l3 用于排序
              l1 = 1 and l2 = 2 order by l3                    使用到了索引，使用了3列，l1,l2 用于查找，l3 用于排序，和l4关系不大
              l1 = 1 and l2 = 2 order by l4                    使用到了索引，l1, l2 用于查找，出现了 Using filesort
              l1 = 1 and l5 = 5 order by l2, l3                使用到了索引，l1 用于查找，没有出现 Using filesort
              l1 = 1 and l5 = 5 order by l3, l2                使用到了索引，l1 用于查找，出现了 Using filesort
              l1 = 1 and l2 = 2 order by l2, l3                使用到了索引，l1 用于查找，l2,l3用于排序，无 Using filesort
              l1 = 1 and l2 = 2 order by l3, l2                使用到了索引，l1,l2 用于查找，出现了 Using filesort
              l1 = 1 and l2 = 2 and l5 = 5 order by l3, l2     使用到了索引，l1,l2 用于查找，没有出现 Using filesort 这是因为l2此时已经是个定值，排序没有意义
              l1 = 1 and l4 = 4 group by l2, l3                使用到了索引，l1 用于查找
              l1 = 1 and l4 = 4 group by l3, l2                使用到了索引，l1 用于查找，出现了 Using temporary 和 Using filesort
              l1 = 1 and l2 like '2%' and l3 =3                使用到了索引，使用了3列
              l1 = 1 and l2 like '%2' and l3 =3                使用到了索引，只有1列l1
              l1 = 1 and l2 like '2%22%' and l3 =3             使用到了索引，使用了3列
            group by 基本上都需要进行排序，会有临时表产生(Using temporary)
          2.5.3 一般性建议
            单键索引，尽量选择针对当前Query过滤性更好的索引
            选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前约好
            选择组合索引的时候，尽量选择可以能包含当前Query中的where字句中更多字段的索引
            尽可能通过分析统计信息和调整Query的写法来达到选择合适索引的目的
3 查询截取分析
      慢查询的开启并捕获
      explain+慢SQL分析
      Show Profile 查询SQL在MySql服务器里执行的细节和生命周期情况
      SQL数据库服务器的参数调优
    3.1 查询优化
        永远小表驱动大表 - 类似于嵌套for循环，外层的循环次数要小于内层的循环次数
            select * from A where id in (select id from B)   等价于
                for select id from B                         # 先循环B
                for select * from A where A.id = B.id        # 后循环A
            select * from A where exists(select 1 from B where B.id = A.id)    等价于
                for select * from A                          # 先循环A
                for select * from B where B.id = A.id        # 后循环B
            当A表的数据集小于B表的数据集时，用 exists 优于 in
            exists   -   select ... from tab where exists(subQuery)
                将主查询的数据，放到子查询中做条件验证，根据验证结果(TURE 或 FALSE)来决定主查询的数据结果是否得以保留
              exists(subQuery)只返回TRUE或FALSE，因此子查询中的 select * 可以是任意语句，官方说法是 在实际的执行过程中，会忽略select清单，因此没有区别
              exists子查询的实际执行过程可能经过了优化而不是理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题
              exists子查询往往也可以用条件表达式，其它子查询或者JOIN来替代，何种最优需具体问题具体分析
        order by 关键字优化
            尽量使用Index方式排序，避免使用FileSort方式排序  -  Using index 而不要 Using FileSort
              使用Index方式排序的情况    Using Index 的效率高于 Using FileSort
                 order by 语句使用索引最左前列
                 使用where子句与order by子句条件组合满足索引最左前列
            尽可能在索引列上完成排序操作，遵照索引列的最佳左前缀
            如果不在索引列上，FileSort有两种算法：单路排序和双路排序
                双路排序 - MySql4.1之前使用双路排序，扫描两次磁盘，最终得到数据，从磁盘去排序字段，在buffer进行排序，再从磁盘去其他字段
                单路拍讯 - MySql4.1之后使用单路排序，从磁盘读取所需要的列，按照 order by 列在 buffer 内对其进行排序，然后扫描排序后的列表进行输出
                结论
                    单路是后出的，总体而言好过双路
                    单路是讲所有数据读取到sort_buffer中，如果字段过多，可能读取的数据超出了容量。这样就会导致每次只取出sort-buffer大小的容量，进行排序，排完再取sort_buffer大小的容量，从而造成了多次IO。
            优化策略
                增大 sort_buffer_size 参数的设置
                增大 max_length_for_sort_data 参数的设置
            提高 sort by 速度
                不要使用 select *
                增大 sort_buffer_size
                增大 max_length_for_sort_data
            总结
                为排序使用索引
                    MySql两种排序方式：文件排序(Using FileSort) 扫描有序索引排序(Using Index)
                    MySql能为排序与查询使用相同的索引
                    多个排序的情况下，必须顺序一致(同升同降)才不会出现 Using FileSort，如果出现不同顺序，就会出现Using FileSort
        group by 关键字优化
            group by 实质是先排序后分组，遵照索引键的最佳左前缀原则
            无法使用索引列，增大 sort_buffer_size 和 max_length_for_sort_data 的值
            where 高于 having ，能在where里搞定的就不要在having里
    3.2 慢查询日志
        配置文件中开启慢查询，关键字
            slow_query_log=1;
            slow_query_log_file=/var/lib/mysql/slow.log;
            long_query_time=3;  - 3S
            log_output=FILE
        一种日志记录，用来记录在MySql中响应时间(long_query_time，默认是5s)超过阀值(不包括等于)的语句，会被记录到慢查询日志中。
        默认情况下，MySql数据库没有开启慢查询日志，需要手动设置。只有在调优状态下，才建议启动该参数。开启慢查询会影响性能
        show variables like '%slow_query_log%'    -   查看是否开启慢查询
        set global.slow_query_log=1;              -   开启慢查询，只对当前数据库生效，重启MySql失效。如果想永久生效，修改配置文件中的值(slow_query_log, slow_query_log_file)
        set global.long_query_time=3;             -   设置阀值，需要重新连接或新开一个会话才能看到修改的值 
        select sleep(N);                          -   睡眠一段时间，模拟慢查询
        show global status like '%Slow_queries%'  -   查询当前系统有多少条慢查询记录
        mysqldumpslow  -  日志分析工具
            -s  表示按照何种方式排序  
            -c  访问次数        -al  平均锁定时间
            -l  锁定时间        -ar  平均返回记录数
            -r  返回记录        -at  平均查询时间
            -t  查询时间        -t   返回前面多少条的数据
            -g  后边搭配一个正则匹配模式，大小写不敏感
          mysqldumpslow -s -r -t 10 /var/lib/mysql/slow.log         得到返回记录集最多的10个SQL
          mysqldumpslow -s -c -t 10 /var/lib/mysql/slow.log         得到返回次数最多的10个SQL
          mysqldumpslow -s t -t 10 -g 'left join' /var/lib/mysql/slow.log     得到按照时间排序的前10条里面含有左连接的查询语句
    3.3 批量数据脚本
        使用过程来实现
        创建函数，如果报错'This function has none of DETERMINISTIC......'
          原因 - 开启过慢查询日志
          解决办法 - 重启MySql失效，可去配置文件中永久修改
            show variables like 'log_bin_trust_function_creators';
            set global log_bin_trust_function_creators=1;
        例子1
          创建函数 - 随机字符串
            create function rand_string(n int) returns varchar(255)
            begin
                declare chars_str varchar(100) default 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                declare return_str varchar(255) default '';
                declare i int default 0;
                while i < n do 
                set return_str = concat(return_str, substring(chars_str, floor(1 + rand()*52), 1);
                set i = i + 1;
                end while;
            end $
          创建过程
            create procedure insert_emp(in start int(10), in max_num(10))
            begin
                declare i int default 0;
                set autocommit = 0;  # 关闭自动提交
                repeat 
                set i = i + 1;
                inset into emp () .....
                until i = max_num;
                end repeat;
                commit;
            end $
          delimiter ;
          call insert_emp();
    3.4 Show Profile
        MySql提供用来分析当前会话中语句执行的资源消耗情况。可用于SQL的调优的测量。
        默认参数是关闭的，并保存最近15次的运行结果。
        步骤
            a. 查看当前版本是否支持
               show variables like 'profiling';
            b. 开启功能
               set profiling=on;
            c. 运行SQL  -  运行之后，后台会自动记录
            d. 查看结果
               show profiles;  # 会查询到最近执行的SQL语句，包括执行该语句的时间
            e. 诊断SQL
               show profile cpu,block io for query ID;  # ID的值通过上一步得到，会详细介绍执行了哪些操作耗费了那么久的时间
               参数 
                 all  -  所有的开销信息
                 block io  -  块IO相关开销
                 context switches  --  上下文切换相关开销
                 cpu  -  CPU相关开销信息
                 ipc  -  发送和接受相关开销信息
                 memory  -  内存相关开销信息
                 page faults  -  页面错误相关开销信息
                 source  -  和 Source_function, Source_file,  Source_line 相关的开销信息
                 swaps  -  交换次数相关开销信息
            f. 结论和需要注意点
               converting HEAP to MyISAM  -  如果结果过大，表明内存都不够用了往磁盘上搬了。
               creating tmp table         -  创建临时表(拷完数据到临时表，用完再删除)
               Copying to tmp table on disk  -  把内存中临时表复制到磁盘，危险
               locked   -  有锁
    3.5 全局查询日志  -  偷偷记录下所有的SQL语句，记录到mysql库里的general_log表中
        只可在测试环境用，不可在生产环境中用。
        配置启用
            修改conf文件，  general_log=1, general_log_file=PATH, log_output=FILE
        编码启用
            set global general_log=1;
            set global log_output='TABLE';
            select * from mysql.general_log;  # 查看记录下的SQL语句
4 锁机制
    锁 - 计算机协调多个线程或进程并发访问某一资源的机制。  
    解决隔离和并发的矛盾。
    分类
        对数据操作的类型分：读锁，写锁
          读锁 - 共享锁，针对同一份数据，多个读操作可同时进行，而不会互相影响
          写锁 - 排它锁，当前写操作没有完成时，会阻断其它读锁和写锁
        对数据操作的粒度分：表锁，行锁
    三锁
        表锁 - 偏读
            偏向MyISAM存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率高，并发度最低
            lock table NAME1 read(write), NAME2 read(write);    # 手动增加表锁
            show open tables;  # 查看表上加过的锁
            unlock tables;     # 释放锁
            只加读锁 - 共享锁，会话1加的锁
                会话1 - 能查看加锁的表的数据，不能修改数据，不能读取其它表数据
                会话2 - 能查看加锁的表的数据，修改数据的时候会阻塞，能读取其它表数据
            只加写锁 - 排它锁
                会话1 - 能查看加锁的表的数据，能修改数据，不能读取其它表的数据
                会话2 - 读取加锁表的数据的时候会阻塞，修改数据会阻塞，能读取其它表的数据
            总结
                MyISAM在执行查询语句前，会自动给涉及的所有表加表锁，在执行增删改前，会自动给涉及的表加写锁。
                读锁会阻塞写，但是不会阻塞读，而写锁会把读和写都阻塞。
                MyISAM的读写锁调度是写优先，因此不适合做写为主的表的引擎。因为写锁后，其它线程不能做任何操作，大量的更细会使查询很难得到锁，从而造成永远阻塞。
            表锁分析
                show open tables;   # 查看哪些表被加锁了
                show status like 'table%';   # 分析表锁定 
                    Table_locks_immediate   - 产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1
                    Table_locks_waited      - 出现表级锁定争用而发生等待的次数(不能立即获取锁的次数，每等待一次锁值加1)，此值高说明存在较严重的表级锁争用情况
        行锁 - 偏写
            特点
                偏向InnoDB存储引擎，开销大，加锁慢，会出现死锁，锁定粒度最小，发生锁冲突的概率最低，并发度最高
                与MyISAM的不同：1.支持事务 2.采用了行级锁
            事务
                更新丢失 - 修改同一数据，后修改的覆盖了前修改的
                脏读 - 已修改但尚未提交
                不可重复读 - 再次读取之前读取的数据时，发现数据发生了改变，读取了已修改的数据
                幻读 - 读到了新增的数据
            无索引(索引失效)行锁变表锁
                例如一个字段是字符型的，然后操作的时候省略了''，会造成强转，会造成索引失效
            间隙锁危害
                使用范围条件而不是等值条件检索数据，并请求共享排它锁时，InnoDB会给符合条件的已有数据记录的索引项加锁。对于键值在范围内但不存在的记录，叫做间隙。
            锁定一行
                begin;
                select * from tab where ... for update;   # 锁定某一行后，其它操作会被阻塞，直到锁定的会话提交commit
                commit;
            总结
                InnoDB实现了行级锁定，并发处理能力优于MyISAM。
                show status like 'innodb_row_lock%';        # 用来分析系统上的行锁的争夺情况
                    Innodb_row_lock_current_waits    -   当前正在等待锁定的数量，重要
                    Innodb_row_lock_time             -   从系统启动到现在锁定总时间长度
                    Innodb_row_lock_time_avg         -   每次等待所花平均时间，重要
                    Innodb_row_lock_time_max         -   从系统启动到现在等待最长的一次所花的时间
                    Innodb_row_lock_waits            -   系统启动后到现在总共等待的次数，重要
        页锁
            开销和加锁时间介于表锁和行锁之间，会出现死锁，锁定粒度介于表锁和行锁之间，并发度一般 
5 主从复制
    基本原理
        slave会从master读取binlog来进行数据同步
        a. master将改变记录到二进制日志，这些记录过程叫二进制日志事件 - binary log events
        b. slave 将master的binary log events 拷贝到它的中继日志(relay log)
        c. slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL的复制是异步的且串行化的。
    基本原则
        每个slave只有一个master
        每个slave只能有一个唯一的服务器ID
        每个master可以有多个slave
    最大问题 - 延时
    常见配置
        版本一致且后台以服务运行
        主从都配置在[mysqld]节点下，都是小写
        service iptables stop   # 关闭防火墙
        建立帐号并授权slave
            grant replication slave on *.* TO user@ip identified by pwd;
            flush privileges;
            show master status;  # 查询master的状态，记录下File和Position的值(从File的Postion开始复制)
        配置需要复制的机器
            change master to master_host='IP' master_user=user master_password=pwd master_log_file=FILE masteer_log_pos=Position;
        start slave;  # 开始主从服务
        show slave status\G;
            需要看到 Slave_IO_Running 和 Slave_SQL_Runnint 都为Yes
        stop slave;  # 停止主从服务









Base
  笛卡尔积
  查看当前使用的数据库
    select database();
    show tables;  // 显示在第一行  Tables_in_XXX
    status;       // current database
  查看表结构
    desc TableName;
    show create table TableName;   // 查看创建表的语句
  字符集
    ALTER DATABASE books CHARACTER SET gbk;     // 修改库的字符集
    set names gbk;              // 修改CMD中的字符集显示
  复制数据表
    只复制表结构
      create table 新表 select * from 旧表 where 1=2;
      create table 新表 like 旧表;
    复制表结构及数据
      create table 新表 select * from 旧表;
  数据库，表，流程控制，函数，视图
                查看已存的                  查看创建的语句 
    数据库     show databases               show create database NAME;
    表         show tables;                 show create table NAME;
    流程控制   show procedure status;       show create procedure NAME;
    函数       show function status;        show create function NAME;
    视图       show table status where comment='view'    show create view NAME;
    索引       show index from NAME;
  数据类型
    整型            字节
        Tinyint      1    -128~127/0~255
        Smallint     2    -32768~32767/0~65535
        Mediumint    3    很大
        Int/Integer  4    很大
        Bigint       8    很大
    小数
      浮点数
        float        4     
        double       8
      定点数
        DEC(M,D)      M - 
        DECIMAL(M,D)  D - 
    位类型
        Bit(M)
    字符类型        最长
        char        0~255
        varchar     0~65535
    日期类型
        date        4       日期，无时间
        datetime    8       日期，有时间
        timestamp   4
        time        3       时间
        year        1       年
      datetiem 与 timestamp
        TimeStamp的范围小，为 19700101080001 - 2038年的某个时间；DateTime的取值范围大，为 1000-1-1 ~ 9999-12-31
        TimeStamp与实际时区有关，更能反映实际的日期；而Datetime只能反映插入时的当地时区的日期
        TimeStamp受Mysql版本和SQLMode影响较大








